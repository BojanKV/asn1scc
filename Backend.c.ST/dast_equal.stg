/*
* Copyright (c) 2008-2012 Semantix and (c) 2012-2015 Neuropublic
*
* This file is part of the ASN1SCC tool.
*
* Licensed under the terms of GNU General Public Licence as published by
* the Free Software Foundation.
*
*  For more informations see License.txt file
*/

group dast_equal;


JoinItems(sPart, soNestedPart) ::= <<
<sPart>
<if(soNestedPart)>
if (ret) {
    <soNestedPart>
}
<endif>
>>


/*
*****************************************************************************************
 E Q U A L      F U N C T I O N S
*****************************************************************************************
*/
PrintEqualPrimitive(sFuncName, sTypeDefName, sContent) ::= <<
flag <sFuncName>(const <sTypeDefName> val1, const <sTypeDefName> val2)
{
	return <sContent>;
}
>>

PrintEqualSequence(sFuncName, sTypeDefName, sContent) ::= <<
flag <sFuncName>(const <sTypeDefName>* pVal1, const <sTypeDefName>* pVal2)
{
	flag ret=TRUE;
    <sContent>
	return ret;
}
>>


isEqual_Integer(p1, p2) ::= "ret = (<p1> == <p2>);"

isEqual_Enumerated(p1, p2) ::= "<isEqual_Integer(p1=p1,p2=p2)>"


isEqual_Boolean(p1, p2) ::= "ret = ( (<p1> && <p2>) || (!<p1> && !<p2>));"

isEqual_Real(p1, p2) ::= <<
ret =  <p1> == <p2> ? TRUE : (<p1> == 0.0 ? <p2> ==0.0 : (fabs((<p1> - <p2>) / <p1>) \< 0.00001));
>>

isEqual_IA5String(p1, p2) ::= "ret = (strcmp(<p1>, <p2>) ==0);"

isEqual_NumericString(p1, p2) ::= "<isEqual_IA5String(p1=p1, p2=p2)>"
isEqual_NullType() ::= "ret = TRUE;"

isEqual_BitString(p1,p2,bIsFixedSize, nFixedSize) ::= <<
<if(!bIsFixedSize)>
ret = ((<p1>nCount == <p2>nCount) && (memcmp(<p1>arr, <p2>arr, <p1>nCount/8) == 0));
ret = ret && (<p1>nCount % 8 > 0 ? (<p1>arr[<p1>nCount/8] \>> (8-<p1>nCount % 8) == <p2>arr[<p1>nCount/8]\>>(8-<p1>nCount % 8) ) : TRUE);

<else>
ret = memcmp(<p1>arr, <p2>arr, <nFixedSize>/8) == 0;
ret = ret && ((<nFixedSize> % 8) >0 ? (<p1>arr[<nFixedSize>/8]\>>(8-<nFixedSize> % 8) == <p2>arr[<nFixedSize>/8]\>>(8-<nFixedSize> % 8) ) : TRUE);

<endif>
>>

isEqual_OctetString(p1,p2,bIsFixedSize, nFixedSize) ::= <<
<if(!bIsFixedSize)>
ret = ((<p1>nCount == <p2>nCount) && (memcmp(<p1>arr, <p2>arr, <p1>nCount) ==0));

<else>
ret = (memcmp(<p1>arr, <p2>arr, <nFixedSize>) ==0);

<endif>	
>>

isEqual_Choice_Child(sCid, sInnerType) ::= <<
case <sCid>:
	<sInnerType>
	break;
>>

isEqual_Choice(p1,p2, arrsChildren) ::= <<
ret = (<p1>kind == <p2>kind);
if (ret) {
	switch(<p1>kind) 
	{
	<arrsChildren: {ch|<ch>}; separator="\n">
	default:
		ret = FALSE;    //COVERAGE_IGNORE
	}
}
>>

isEqual_Sequence_child(p1, p2, sAcc,  bIsOptional, sChName, soInnerStatement) ::= <<
<if(bIsOptional)>
ret = (<p1><sAcc>exist.<sChName> == <p2><sAcc>exist.<sChName>);
<if(soInnerStatement)>
if (ret && <p1><sAcc>exist.<sChName>) {
	<soInnerStatement>
}

<endif>

<else>
<soInnerStatement>

<endif>
>>


isEqual_SequenceOf(p1,p2, sAcc, i, bIsFixedSize, nFixedSize, soInnerStatement) ::= <<
<if(!bIsFixedSize)>
ret = (<p1><sAcc>nCount == <p2><sAcc>nCount);

<endif>
<if (soInnerStatement)>
for(<i> = 0; ret && <i> \< <if(!bIsFixedSize)><p1><sAcc>nCount<else><nFixedSize><endif>; <i>++) 
{
	<soInnerStatement>
}

<endif>
>>


isEqual_ReferenceType(sPtr1, sPtr2, sName) ::= <<
ret = <sName>_Equal(<sPtr1>, <sPtr2>);
>>


