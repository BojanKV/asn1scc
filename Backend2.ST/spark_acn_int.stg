group spark_uper_int:spark_spec;

PositiveInteger_ConstSize_encode(p, nFixedSize, bHasAdjust, nAdjustValue, nUperMin, nUperMax) ::= <<
<rtlModuleName()>.Acn_Enc_Int_PositiveInteger_ConstSize(S, K, <if(bHasAdjust)>(<p>-<nAdjustValue>)<else><p><endif>, <nFixedSize>);
>>

PositiveInteger_ConstSize_decode(p, nFixedSize, bHasAdjust, nAdjustValue, nUperMin, nUperMax) ::= <<
<rtlModuleName()>.Acn_Dec_Int_PositiveInteger_ConstSize(S, K, <p>, <nAdjustValue>, <nUperMin>, <nUperMax>, <nFixedSize>, result);
>>

PositiveInteger_ConstSize_8_encode(p, bHasAdjust, nAdjustValue, nUperMin, nUperMax) ::= <<
<rtlModuleName()>.Acn_Enc_Int_PositiveInteger_ConstSize_8(S, K, <if(bHasAdjust)>(<p>-<nAdjustValue>)<else><p><endif>);
>>
PositiveInteger_ConstSize_8_decode(p, bHasAdjust, nAdjustValue, nUperMin, nUperMax) ::= <<
<rtlModuleName()>.Acn_Dec_Int_PositiveInteger_ConstSize_8(S, K, <p>, <nAdjustValue>, <nUperMin>, <nUperMax>, result);
>>

PositiveInteger_ConstSize_big_endian_16_encode(p, bHasAdjust, nAdjustValue, nUperMin, nUperMax) ::= "<rtlModuleName()>.Acn_Enc_Int_PositiveInteger_ConstSize_big_endian_16(S, K, <if(bHasAdjust)>(<p>-<nAdjustValue>)<else><p><endif>);"
PositiveInteger_ConstSize_big_endian_16_decode(p, bHasAdjust, nAdjustValue, nUperMin, nUperMax) ::= "<rtlModuleName()>.Acn_Dec_Int_PositiveInteger_ConstSize_big_endian_16(S, K, <p>, <nAdjustValue>, <nUperMin>, <nUperMax>, result);"

PositiveInteger_ConstSize_big_endian_32_encode(p, bHasAdjust, nAdjustValue, nUperMin, nUperMax) ::= "<rtlModuleName()>.Acn_Enc_Int_PositiveInteger_ConstSize_big_endian_32(S, K, <if(bHasAdjust)>(<p>-<nAdjustValue>)<else><p><endif>);"
PositiveInteger_ConstSize_big_endian_32_decode(p, bHasAdjust, nAdjustValue, nUperMin, nUperMax) ::= "<rtlModuleName()>.Acn_Dec_Int_PositiveInteger_ConstSize_big_endian_32(S, K, <p>, <nAdjustValue>, <nUperMin>, <nUperMax>, result);"

PositiveInteger_ConstSize_big_endian_64_encode(p, bHasAdjust, nAdjustValue, nUperMin, nUperMax) ::= "<rtlModuleName()>.Acn_Enc_Int_PositiveInteger_ConstSize_big_endian_64(S, K, <if(bHasAdjust)>(<p>-<nAdjustValue>)<else><p><endif>);"
PositiveInteger_ConstSize_big_endian_64_decode(p, bHasAdjust, nAdjustValue, nUperMin, nUperMax) ::= "<rtlModuleName()>.Acn_Dec_Int_PositiveInteger_ConstSize_big_endian_64(S, K, <p>, <nAdjustValue>, <nUperMin>, <nUperMax>, result);"

PositiveInteger_ConstSize_little_endian_16_encode(p, bHasAdjust, nAdjustValue, nUperMin, nUperMax) ::= "<rtlModuleName()>.Acn_Enc_Int_PositiveInteger_ConstSize_little_endian_16(S, K, <if(bHasAdjust)>(<p>-<nAdjustValue>)<else><p><endif>);"
PositiveInteger_ConstSize_little_endian_16_decode(p, bHasAdjust, nAdjustValue, nUperMin, nUperMax) ::= "<rtlModuleName()>.Acn_Dec_Int_PositiveInteger_ConstSize_little_endian_16(S, K, <p>, <nAdjustValue>, <nUperMin>, <nUperMax>, result);"

PositiveInteger_ConstSize_little_endian_32_encode(p, bHasAdjust, nAdjustValue, nUperMin, nUperMax) ::= "<rtlModuleName()>.Acn_Enc_Int_PositiveInteger_ConstSize_little_endian_32(S, K, <if(bHasAdjust)>(<p>-<nAdjustValue>)<else><p><endif>);"
PositiveInteger_ConstSize_little_endian_32_decode(p, bHasAdjust, nAdjustValue, nUperMin, nUperMax) ::= "<rtlModuleName()>.Acn_Dec_Int_PositiveInteger_ConstSize_little_endian_32(S, K, <p>, <nAdjustValue>, <nUperMin>, <nUperMax>,  result);"

PositiveInteger_ConstSize_little_endian_64_encode(p, bHasAdjust, nAdjustValue, nUperMin, nUperMax) ::= "<rtlModuleName()>.Acn_Enc_Int_PositiveInteger_ConstSize_little_endian_64(S, K, <if(bHasAdjust)>(<p>-<nAdjustValue>)<else><p><endif>);"
PositiveInteger_ConstSize_little_endian_64_decode(p, bHasAdjust, nAdjustValue, nUperMin, nUperMax) ::= "<rtlModuleName()>.Acn_Dec_Int_PositiveInteger_ConstSize_little_endian_64(S, K, <p>, <nAdjustValue>, <nUperMin>, <nUperMax>, result);"

PositiveInteger_VarSize_LengthEmbedded_encode(p, bHasAdjust, nAdjustValue, nUperMin) ::= "<rtlModuleName()>.Acn_Enc_Int_PositiveInteger_VarSize_LengthEmbedded(S, K, <if(bHasAdjust)>(<p>-<nAdjustValue>)<else><p><endif>);"
PositiveInteger_VarSize_LengthEmbedded_decode(p, bHasAdjust, nAdjustValue, nUperMin) ::= "<rtlModuleName()>.Acn_Dec_Int_PositiveInteger_VarSize_LengthEmbedded(S, K, <p>, <nAdjustValue>, <nUperMin>, result);"


TwosComplement_ConstSize_encode(p, nFixedSize, nUperMin, nUperMax) ::= "<rtlModuleName()>.Acn_Enc_Int_TwosComplement_ConstSize(S, K, <p>, <nFixedSize>);"
TwosComplement_ConstSize_decode(p, nFixedSize, nUperMin, nUperMax) ::= "<rtlModuleName()>.Acn_Dec_Int_TwosComplement_ConstSize(S, K, <p>, <nUperMin>, <nUperMax>, <nFixedSize>, result);"

TwosComplement_ConstSize_8_encode(p, nUperMin, nUperMax) ::= "<rtlModuleName()>.Acn_Enc_Int_TwosComplement_ConstSize_8(S, K, <p>);"
TwosComplement_ConstSize_8_decode(p, nUperMin, nUperMax) ::= "<rtlModuleName()>.Acn_Dec_Int_TwosComplement_ConstSize_8(S, K, <p>, <nUperMin>, <nUperMax>, result);"

TwosComplement_ConstSize_big_endian_16_encode(p, nUperMin, nUperMax) ::= "<rtlModuleName()>.Acn_Enc_Int_TwosComplement_ConstSize_big_endian_16(S, K, <p>);"
TwosComplement_ConstSize_big_endian_16_decode(p, nUperMin, nUperMax) ::= "<rtlModuleName()>.Acn_Dec_Int_TwosComplement_ConstSize_big_endian_16(S, K, <p>, <nUperMin>, <nUperMax>, result);"

TwosComplement_ConstSize_big_endian_32_encode(p, nUperMin, nUperMax) ::= "<rtlModuleName()>.Acn_Enc_Int_TwosComplement_ConstSize_big_endian_32(S, K, <p>);"
TwosComplement_ConstSize_big_endian_32_decode(p, nUperMin, nUperMax) ::= "<rtlModuleName()>.Acn_Dec_Int_TwosComplement_ConstSize_big_endian_32(S, K, <p>, <nUperMin>, <nUperMax>, result);"

TwosComplement_ConstSize_big_endian_64_encode(p, nUperMin, nUperMax) ::= "<rtlModuleName()>.Acn_Enc_Int_TwosComplement_ConstSize_big_endian_64(S, K, <p>);"
TwosComplement_ConstSize_big_endian_64_decode(p, nUperMin, nUperMax) ::= "<rtlModuleName()>.Acn_Dec_Int_TwosComplement_ConstSize_big_endian_64(S, K, <p>, <nUperMin>, <nUperMax>, result);"

TwosComplement_ConstSize_little_endian_16_encode(p, nUperMin, nUperMax) ::= "<rtlModuleName()>.Acn_Enc_Int_TwosComplement_ConstSize_little_endian_16(S, K, <p>);"
TwosComplement_ConstSize_little_endian_16_decode(p, nUperMin, nUperMax) ::= "<rtlModuleName()>.Acn_Dec_Int_TwosComplement_ConstSize_little_endian_16(S, K, <p>, <nUperMin>, <nUperMax>, result);"

TwosComplement_ConstSize_little_endian_32_encode(p, nUperMin, nUperMax) ::= "<rtlModuleName()>.Acn_Enc_Int_TwosComplement_ConstSize_little_endian_32(S, K, <p>);"
TwosComplement_ConstSize_little_endian_32_decode(p, nUperMin, nUperMax) ::= "<rtlModuleName()>.Acn_Dec_Int_TwosComplement_ConstSize_little_endian_32(S, K, <p>, <nUperMin>, <nUperMax>, result);"

TwosComplement_ConstSize_little_endian_64_encode(p, nUperMin, nUperMax) ::= "<rtlModuleName()>.Acn_Enc_Int_TwosComplement_ConstSize_little_endian_64(S, K, <p>);"
TwosComplement_ConstSize_little_endian_64_decode(p, nUperMin, nUperMax) ::= "<rtlModuleName()>.Acn_Dec_Int_TwosComplement_ConstSize_little_endian_64(S, K, <p>, <nUperMin>, <nUperMax>, result);"

TwosComplement_VarSize_LengthEmbedded_encode(p) ::= "<rtlModuleName()>.Acn_Enc_Int_TwosComplement_VarSize_LengthEmbedded(S, K, <p>);"
TwosComplement_VarSize_LengthEmbedded_decode(p) ::= "<rtlModuleName()>.Acn_Dec_Int_TwosComplement_VarSize_LengthEmbedded(S, K, <p>, result);"


BCD_ConstSize_encode(p, nUperMin, nUperMax, nNibbles) ::= "<rtlModuleName()>.Acn_Enc_Int_BCD_ConstSize(S, K, <p>, <nNibbles>);"
BCD_ConstSize_decode(p, nUperMin, nUperMax, nNibbles) ::= "<rtlModuleName()>.Acn_Dec_Int_BCD_ConstSize(S, K, <p>, <nUperMin>, <nUperMax>, <nNibbles>, result);"

BCD_VarSize_LengthEmbedded_encode(p) ::= "<rtlModuleName()>.Acn_Enc_Int_BCD_VarSize_LengthEmbedded(S, K, <p>);"
BCD_VarSize_LengthEmbedded_decode(p) ::= "<rtlModuleName()>.Acn_Dec_Int_BCD_VarSize_LengthEmbedded(S, K, <p>, result);"

BCD_VarSize_NullTerminated_encode(p, nUperMin, nUperMax) ::= "<rtlModuleName()>.Acn_Enc_Int_BCD_VarSize_NullTerminated(S, K, <p>);"
BCD_VarSize_NullTerminated_decode(p, nUperMin, nUperMax) ::= "<rtlModuleName()>.Acn_Dec_Int_BCD_VarSize_NullTerminated(S, K, <p>, <nUperMin>, <nUperMax>, result);"

ASCII_ConstSize_encode(p, nUperMin, nUperMax, nSizeInBytes) ::= "<rtlModuleName()>.Acn_Enc_Int_ASCII_ConstSize(S, K, <p>, <nSizeInBytes>);"
ASCII_ConstSize_decode(p, nUperMin, nUperMax, nSizeInBytes) ::= "<rtlModuleName()>.Acn_Dec_Int_ASCII_ConstSize(S, K, <p>, <nUperMin>, <nUperMax>, <nSizeInBytes>, result);"

ASCII_VarSize_LengthEmbedded_encode(p) ::= "<rtlModuleName()>.Acn_Enc_Int_ASCII_VarSize_LengthEmbedded(S, K, <p>);"
ASCII_VarSize_LengthEmbedded_decode(p) ::= "<rtlModuleName()>.Acn_Dec_Int_ASCII_VarSize_LengthEmbedded(S, K, <p>, result);"

ASCII_VarSize_NullTerminated_encode(p, nUperMin, nUperMax) ::= "<rtlModuleName()>.Acn_Enc_Int_ASCII_VarSize_NullTerminated(S, K, <p>);"
ASCII_VarSize_NullTerminated_decode(p, nUperMin, nUperMax) ::= "<rtlModuleName()>.Acn_Dec_Int_ASCII_VarSize_NullTerminated(S, K, <p>, <nUperMin>, <nUperMax>, result);"



Real_IEEE754_32_big_endian_encode(p) ::= "<rtlModuleName()>.Acn_Enc_Real_IEEE754_32_big_endian(S, K, <p>);"
Real_IEEE754_32_big_endian_decode(p) ::= "<rtlModuleName()>.Acn_Dec_Real_IEEE754_32_big_endian(S, K, <p>, result);"

Real_IEEE754_64_big_endian_encode(p) ::= "<rtlModuleName()>.Acn_Enc_Real_IEEE754_64_big_endian(S, K, <p>);"
Real_IEEE754_64_big_endian_decode(p) ::= "<rtlModuleName()>.Acn_Dec_Real_IEEE754_64_big_endian(S, K, <p>, result);"

Real_IEEE754_32_little_endian_encode(p) ::= "<rtlModuleName()>.Acn_Enc_Real_IEEE754_32_little_endian(S, K, <p>);"
Real_IEEE754_32_little_endian_decode(p) ::= "<rtlModuleName()>.Acn_Dec_Real_IEEE754_32_little_endian(S, K, <p>, result);"

Real_IEEE754_64_little_endian_encode(p) ::= "<rtlModuleName()>.Acn_Enc_Real_IEEE754_64_little_endian(S, K, <p>);"
Real_IEEE754_64_little_endian_decode(p) ::= "<rtlModuleName()>.Acn_Dec_Real_IEEE754_64_little_endian(S, K, <p>, result);"



Boolean_declare_pattern_array(sName, arruBits) ::= <<
SUBTYPE <sName>_pattern_array_range is Natural range 1..<arruBits.Length>;
SUBTYPE <sName>_pattern_array is <rtlModuleName()>.BitArray(<sName>_pattern_array_range);
<sName>_pattern:CONSTANT <sName>_pattern_array := <sName>_pattern_array'(<arruBits:{b|<i>=><b>}; wrap, anchor, separator=", ">);
>>

Boolean_encode(p, bTruePattern, sLongName) ::= <<
<if(bTruePattern)>
<rtlModuleName()>.Acn_Enc_Boolean_true_pattern(S, K, <p>, <sLongName>_pattern);
<else>
<rtlModuleName()>.Acn_Enc_Boolean_false_pattern(S, K, <p>, <sLongName>_pattern);
<endif>
>>

Boolean_decode(p, bTruePattern, sLongName) ::= <<
<if(bTruePattern)>
<rtlModuleName()>.Acn_Dec_Boolean_true_pattern(S, K, <p>, <sLongName>_pattern, result);
<else>
<rtlModuleName()>.Acn_Dec_Boolean_false_pattern(S, K, <p>, <sLongName>_pattern, result);
<endif>
>>


Null_pattern_encode(p, sLongName) ::= <<
<rtlModuleName()>.Acn_Enc_NullType_pattern(S, K, <p>, <sLongName>_pattern);
>>

Null_pattern_decode(p, sLongName) ::= <<
<rtlModuleName()>.Acn_Dec_NullType_pattern(S, K, <p>, <sLongName>_pattern, result);
>>



Null_pattern2_encode(sLongName) ::= <<
<rtlModuleName()>.Acn_Enc_NullType_pattern2(S, K, <sLongName>_pattern);
>>

Null_pattern2_decode(sLongName) ::= <<
<rtlModuleName()>.Acn_Dec_NullType_pattern2(S, K, <sLongName>_pattern, result);
>>


Null2_encode() ::= <<
 -- encoding NULL, nothing to do
>>

Null2_decode() ::= <<
 -- decoding NULL, nothing to do
>>


Null_encode(p) ::= <<
<rtlModuleName()>.Acn_Enc_NullType(S, K, <p>);
>>

Null_decode(p) ::= <<
<rtlModuleName()>.Acn_Dec_NullType(S, K, <p>, result);
>>




Enumerated_item_encode(p, sName, nItemIdxOrVal) ::= "when <sName>    => intVal := <nItemIdxOrVal>;"

Enumerated_item_decode(p, sName, nItemIdxOrVal) ::= "when <nItemIdxOrVal> => <p> := <sName>;"

EnumeratedEncIdx_encode(p, sTasName, arrsItem, sActualCodecFunc) ::= <<
case <p> is 
    <arrsItem; separator="\n">
end case;
<sActualCodecFunc>
>>

EnumeratedEncIdx_decode(p, sTasName, arrsItem, sActualCodecFunc) ::= <<
<p> := <sTasName>_Init;
<sActualCodecFunc>
IF result.Success THEN
    case <sTasName>_index_range(intVal) is
        <arrsItem; separator="\n">
    end case;
END IF;
>>


EnumeratedEncValues_encode(p, sTasName, arrsItem, sActualCodecFunc) ::= <<
<EnumeratedEncIdx_encode(p=p, sTasName=sTasName, arrsItem=arrsItem, sActualCodecFunc=sActualCodecFunc)>
>>

EnumeratedEncValues_decode(p, sTasName, arrsItem, sActualCodecFunc) ::= <<
<p> := <sTasName>_Init;
<sActualCodecFunc>
IF result.Success THEN
    case intVal is
        <arrsItem; separator="\n">
    when others =>
        result := <rtlModuleName()>.ASN1_RESULT'(Success => False, ErrorCode => <rtlModuleName()>.ERR_INCORRECT_STREAM);
    end case;
END IF;
>>


// Strings



Acn_String_Ascii_FixSize_encode(p, nAsn1Max) ::= "<rtlModuleName()>.Acn_Enc_String_Ascii_FixSize(S, K, <p>);"
Acn_String_Ascii_FixSize_decode(p, nAsn1Max) ::= "<rtlModuleName()>.Acn_Dec_String_Ascii_FixSize(S, K, <p>, result);"

Acn_String_Ascii_Null_Teminated_encode(p, nAsn1Max, sNull) ::= "<rtlModuleName()>.Acn_Enc_String_Ascii_Null_Teminated(S, K, <sNull>, <p>);"
Acn_String_Ascii_Null_Teminated_decode(p, nAsn1Max, sNull) ::= "<rtlModuleName()>.Acn_Dec_String_Ascii_Null_Teminated(S, K, <sNull>, <p>, result);"

Acn_String_Ascii_External_Field_Determinant_encode(p, nAsn1Max, sExtFld) ::= "<rtlModuleName()>.Acn_Enc_String_Ascii_External_Field_Determinant(S, K, <p>);"
Acn_String_Ascii_External_Field_Determinant_decode(p, nAsn1Max, sExtFld) ::= "<rtlModuleName()>.Acn_Dec_String_Ascii_External_Field_Determinant(S, K, <sExtFld>, <p>, result);"

Acn_String_Ascii_Internal_Field_Determinant_encode(p, nAsn1Max, nAsn1Min, nInternalLengthDeterminantSizeInBits) ::= "<rtlModuleName()>.Acn_Enc_String_Ascii_Internal_Field_Determinant(S, K, <nAsn1Min>, <nInternalLengthDeterminantSizeInBits>, <p>);"
Acn_String_Ascii_Internal_Field_Determinant_decode(p, nAsn1Max, nAsn1Min, nInternalLengthDeterminantSizeInBits) ::= "<rtlModuleName()>.Acn_Dec_String_Ascii_Internal_Field_Determinant(S, K, <nAsn1Min>, <nInternalLengthDeterminantSizeInBits>, <p>, result);"


Acn_String_CharIndex_FixSize_encode(p, nAsn1Max, arrnAlphabetAsciiCodes, nCharSetSize) ::= <<
<PrintAlphabet2(arrnAlphabetAsciiCodes)>
<rtlModuleName()>.Acn_Enc_String_CharIndex_FixSize(pBitStrm, <nAsn1Max>, allowedCharSet, <nCharSetSize>, <p>);
>>

Acn_String_CharIndex_FixSize_decode(p, nAsn1Max, arrnAlphabetAsciiCodes, nCharSetSize) ::= <<
<PrintAlphabet2(arrnAlphabetAsciiCodes)>
<rtlModuleName()>.Acn_Dec_String_CharIndex_FixSize(pBitStrm, <nAsn1Max>, allowedCharSet, <nCharSetSize>, <p>);
>>

Acn_String_CharIndex_External_Field_Determinant_encode(p, nAsn1Max, arrnAlphabetAsciiCodes, nCharSetSize, sExtFld) ::= <<
<PrintAlphabet2(arrnAlphabetAsciiCodes)>
<rtlModuleName()>.Acn_Enc_String_CharIndex_External_Field_Determinant(pBitStrm, <nAsn1Max>, allowedCharSet, <nCharSetSize>, <sExtFld>, <p>);
>>

Acn_String_CharIndex_External_Field_Determinant_decode(p, nAsn1Max, arrnAlphabetAsciiCodes, nCharSetSize, sExtFld) ::= <<
<PrintAlphabet2(arrnAlphabetAsciiCodes)>
<rtlModuleName()>.Acn_Dec_String_CharIndex_External_Field_Determinant(pBitStrm, <nAsn1Max>, allowedCharSet, <nCharSetSize>, <sExtFld>, <p>);
>>

Acn_String_CharIndex_Internal_Field_Determinant_encode(p, nAsn1Max, arrnAlphabetAsciiCodes, nCharSetSize, nAsn1Min) ::= <<
<PrintAlphabet2(arrnAlphabetAsciiCodes)>
<rtlModuleName()>.Acn_Enc_String_CharIndex_Internal_Field_Determinant(pBitStrm, <nAsn1Max>, allowedCharSet, <nCharSetSize>, <nAsn1Min>, <p>);
>>

Acn_String_CharIndex_Internal_Field_Determinant_decode(p, nAsn1Max, arrnAlphabetAsciiCodes, nCharSetSize, nAsn1Min) ::= <<
<PrintAlphabet2(arrnAlphabetAsciiCodes)>
<rtlModuleName()>.Acn_Dec_String_CharIndex_Internal_Field_Determinant(pBitStrm, <nAsn1Max>, allowedCharSet, <nCharSetSize>, <nAsn1Min>, <p>);
>>

