group a_uper;

rtlModuleName() ::= "adaasn1rtl"


EmitTypeAssignment_def_err_code(sErrCode, nErrValue) ::= <<
<sErrCode>:CONSTANT INTEGER := <nErrValue>; 
>>

EmitTypeAssignment_def_encode(sVarName, sStar, sFuncName, sTypeDefName, arrsErrcodes, bEmptyEncodingSpace, nMaxBytesInPER, nMaxBitsInPER) ::= <<
<arrsErrcodes; separator="\n">
<sTypeDefName>_REQUIRED_BYTES_FOR_ENCODING:CONSTANT INTEGER := <nMaxBytesInPER>;
<sTypeDefName>_REQUIRED_BITS_FOR_ENCODING:CONSTANT INTEGER := <nMaxBitsInPER>;

SUBTYPE <sTypeDefName>_uPER_bit_array_range is Natural range 1..<if(bEmptyEncodingSpace)>1<else><sTypeDefName>_REQUIRED_BITS_FOR_ENCODING<endif>;
SUBTYPE <sTypeDefName>_uPER_bit_array is <rtlModuleName()>.BitArray(<sTypeDefName>_uPER_bit_array_range);

TYPE <sTypeDefName>_uPER_Stream IS RECORD
    K	: Natural;
    DataLen	: Natural;
    Data : <sTypeDefName>_uPER_bit_array;
end RECORD;

procedure <sFuncName>(val:in <sTypeDefName>; Stream : OUT <sTypeDefName>_uPER_Stream; result : OUT <rtlModuleName()>.ASN1_RESULT);
>>

EmitTypeAssignment_def_decode(sVarName, sStar, sFuncName, sTypeDefName, arrsErrcodes, bEmptyEncodingSpace, nMaxBytesInPER, nMaxBitsInPER) ::= <<
<arrsErrcodes; separator="\n">
procedure <sFuncName>(<sVarName>:in out <sTypeDefName>; Stream : IN <sTypeDefName>_uPER_Stream; result : OUT <rtlModuleName()>.ASN1_RESULT);
>>

TasEncodeMain(sVarName, sFuncName, sTypeDefName) ::= /*nogen*/<<
procedure <sFuncName>(<sVarName>:in <sTypeDefName>; Stream : OUT <sTypeDefName>_uPER_Stream; result : OUT <rtlModuleName()>.ASN1_RESULT)
IS
begin
    Stream := <sTypeDefName>_uPER_Stream'(K => 0, DataLen => 0, Data => <sTypeDefName>_uPER_bit_array'(others => 0));
    <sFuncName>_aux(<sVarName>, Stream.Data, Stream.DataLen, result);
end <sFuncName>;
>>

EmitTypeAssignment_encode(sVarName, sStar, sFuncName, soIValidFuncName, sTypeDefName, arrsLocalVariables, sContent, soSparkAnnotations) ::= <<
procedure <sFuncName>_aux(<sVarName>:in <sTypeDefName>; S : in out <rtlModuleName()>.BitArray; K : in out Natural; result : OUT <rtlModuleName()>.ASN1_RESULT)
<soSparkAnnotations>
IS
    <arrsLocalVariables; separator="\n">
begin
    <if(soIValidFuncName)>
    result := <soIValidFuncName>(<sVarName>);
    if result.success THEN
        <sContent>
    end if;
    <else>
    result := <rtlModuleName()>.ASN1_RESULT'(Success => true, ErrorCode => 0);
    <sContent>
    <endif>
end <sFuncName>_aux;

<TasEncodeMain(sVarName=sVarName, sFuncName=sFuncName, sTypeDefName=sTypeDefName)>
>>

TasDecodeMain(sVarName, sFuncName, sTypeDefName) ::= /*nogen*/<<
procedure <sFuncName>(<sVarName>:in out <sTypeDefName>; Stream : IN <sTypeDefName>_uPER_Stream; result : OUT <rtlModuleName()>.ASN1_RESULT)
IS
    iter:<rtlModuleName()>.DECODE_PARAMS;
begin
    iter := <rtlModuleName()>.DECODE_PARAMS'(K => 0, DataLen => Stream.DataLen);
    <sFuncName>_aux(<sVarName>, Stream.Data, iter, result);
    result.Success := result.Success AND iter.K\<=iter.DataLen;
end <sFuncName>;
>>

EmitTypeAssignment_decode(sVarName, sStar, sFuncName, soIValidFuncName, sTypeDefName, arrsLocalVariables, sContent, soSparkAnnotations) ::= <<
procedure <sFuncName>_aux(<sVarName>:in out <sTypeDefName>; S : in <rtlModuleName()>.BitArray; K : in out <rtlModuleName()>.DECODE_PARAMS; result : OUT <rtlModuleName()>.ASN1_RESULT)
<soSparkAnnotations>
IS
    <arrsLocalVariables; separator="\n">
begin
    <sContent>
end <sFuncName>_aux;

<TasDecodeMain(sVarName=sVarName, sFuncName=sFuncName, sTypeDefName=sTypeDefName)>
>>


/*
 depends => (
                S => (S , K, val), 
                K => (K<if(bKDependsOnValue)>, val<endif>)<if(bAcnEncodeFuncRequiresResult)> , 
                result => val 
                <endif>
            ),
*/
annotations_encode(sName, bKDependsOnValue, bAcnEncodeFuncRequiresResult, bResDependsOnData, bKDependsOnData) ::= <<
with
 pre  => S'Last >= <sName>_REQUIRED_BITS_FOR_ENCODING and then K >= S'First - 1 and then K \<= S'Last - <sName>_REQUIRED_BITS_FOR_ENCODING and then K \<= Natural'Last - <sName>_REQUIRED_BITS_FOR_ENCODING,
 post => K>=K'Old and K\<=K'Old + <sName>_REQUIRED_BITS_FOR_ENCODING
>>


/*
 depends => (
            val => (S , K) ,
            K => (K <if(bKDependsOnData)>,S<endif>),
            result => (K<if(bResDependsOnData)>,S<endif>)
            ),
*/

annotations_decode(sName, bKDependsOnValue, bAcnEncodeFuncRequiresResult, bResDependsOnData, bKDependsOnData) ::= <<
with
 pre => S'Last >= <sName>_REQUIRED_BITS_FOR_ENCODING and then K.K >= S'First - 1 and then K.K \<= S'Last - <sName>_REQUIRED_BITS_FOR_ENCODING and then K.K \<= Natural'Last - <sName>_REQUIRED_BITS_FOR_ENCODING,
 post => K.K>=K'Old.K and K.K\<=K'Old.K+<sName>_REQUIRED_BITS_FOR_ENCODING
>>





/*case: A:: = INTEGER (5..20) */
IntFullyConstraint_encode(p, nMin, nMax, nBits, sErrCode) ::= "<rtlModuleName()>.UPER_Enc_ConstraintWholeNumber(S, K, <p>, <nMin>, <nBits>);"
IntFullyConstraint_decode(p, nMin, nMax, nBits, sErrCode) ::= <<
result.ErrorCode := <sErrCode>;
<rtlModuleName()>.UPER_Dec_ConstraintWholeNumber(S, K, <p>, <nMin>, <nMax>, <nBits>, result.Success);
>>

/*case: A :: = INTEGER */
IntUnconstraint_encode(p, sErrCode) ::= "<rtlModuleName()>.UPER_Enc_UnConstraintWholeNumber(S, K, <p>);"
IntUnconstraint_decode(p, sErrCode) ::= <<
result.ErrorCode := <sErrCode>;
<rtlModuleName()>.UPER_Dec_UnConstraintWholeNumber(S, K, <p>, result.Success);
>>

/*case: A :: = INTEGER(MIN..5) */
IntUnconstraintMax_encode(p, nMax, soCheckExp, sErrCode) ::= "<rtlModuleName()>.UPER_Enc_UnConstraintWholeNumber(S, K, <p>);"
IntUnconstraintMax_decode(p, nMax, soCheckExp, sErrCode) ::= <<
result.ErrorCode := <sErrCode>;
<rtlModuleName()>.UPER_Dec_UnConstraintWholeNumberMax(S, K, <p>, <nMax>, result.Success);
--result.Success := result.Success and then (<soCheckExp>);
>>


/*case: A:: = INTEGER (5..MAX) */
IntSemiConstraint_encode(p, nMin, sErrCode) ::= "<rtlModuleName()>.UPER_Enc_SemiConstraintWholeNumber(S, K, <p>, <nMin>);"
IntSemiConstraint_decode(p, nMin, sErrCode) ::= <<
result.ErrorCode := <sErrCode>;
<rtlModuleName()>.UPER_Dec_SemiConstraintWholeNumber(S, K, <p>, <nMin>, result.Success);
>>


/*case: A:: = INTEGER (5..40,...) */
IntRootExt_encode(p, nMin, sRootBaseConstraint, sIntBody, sErrCode) ::=<<
if <sRootBaseConstraint> THEN
    <rtlModuleName()>.BitStream_AppendBit(S, K, 0); -- write extension bit
    <sIntBody>
end if;
>>

Declare_ExtensionBit()::="extBit:<rtlModuleName()>.BIT;"

IntRootExt_decode(p, nMin, sRootBaseConstraint, sIntBody, sErrCode) ::=<<
result.ErrorCode := <sErrCode>;
<p> := <nMin>;
declare
    extBit:<rtlModuleName()>.BIT;
begin
    <rtlModuleName()>.BitStream_ReadBit(S, K, extBit, result.Success); -- read extension bit
    if result.Success THEN
        if extBit=0 THEN --extBit is zero ==> value is expecteted within root range
            <sIntBody>
        ELSE
            <IntUnconstraint_decode(p=p, sErrCode=sErrCode)>
        end if;
    end if;
end;
>>


/*case: A:: = INTEGER (5..40,..., 60..70) */
IntRootExt2_encode(p, nMin, sRootBaseConstraint, sIntBody, sErrCode) ::=<<
if <sRootBaseConstraint> THEN
    <rtlModuleName()>.BitStream_AppendBit(S, K, 0); -- value within root range, so ext bit is zero
    <sIntBody>
ELSE
    -- value is not within root range, so ext bit is one and value is encoded as uncostraint
    <rtlModuleName()>.BitStream_AppendBit(S, K, 1);
    <IntUnconstraint_encode(p=p, sErrCode=sErrCode)>
end if;
>>

IntRootExt2_decode(p, nMin, sRootBaseConstraint, sIntBody, sErrCode) ::= "<IntRootExt_decode(p=p, nMin=nMin, sIntBody = sIntBody, sErrCode=sErrCode)>"


Null_encode(p) ::= <<
<rtlModuleName()>.Acn_Enc_NullType(S, K, <p>);
>>

Null_decode(p) ::= <<
<rtlModuleName()>.Acn_Dec_NullType(S, K, <p>, result);
>>

Boolean_encode(p, sErrCode) ::= "<rtlModuleName()>.UPER_Enc_Boolean(S, K, <p>);"

Boolean_decode(p, sErrCode) ::= <<
result.ErrorCode := <rtlModuleName()>.ERR_INSUFFICIENT_DATA;
<rtlModuleName()>.UPER_Dec_boolean(S, K, <p>, result.Success);
>>

Real_encode(p, sErrCode) ::= "<rtlModuleName()>.UPER_Enc_Real(S, K, <p>);"
Real_decode(p, sErrCode) ::= <<
<rtlModuleName()>.UPER_Dec_Real(S, K, <p>, result);
>>


Declare_EnumIndex()::="intVal:<rtlModuleName()>.Asn1Int;"

Declare_AsnIntForMappingFuncion()::="mapFuncIntVal:<rtlModuleName()>.Asn1Int;"

/* ENUMERATED START */

Enumerated_item_encode(p, sName, nIndex, nLastItemIndex) ::= "when <sName>    => intVal := <nIndex>;"

Enumerated_item_decode(p, sName, nIndex, nLastItemIndex) ::= "when <nIndex> => <p> := <sName>;"


Enumerated_encode(p, sTypeName, arrsItem, nMin, nMax, nBits, sErrCode, nLastItemIndex, sFirstItemName) ::= <<
declare
    intVal:Asn1Int;
begin
    case <p> is 
        <arrsItem; separator="\n">
    end case;
    <rtlModuleName()>.UPER_Enc_ConstraintWholeNumber(S, K, intVal, <nMin>, <nBits>);
end;
>>

Enumerated_decode(p, sTypeName, arrsItem, nMin, nMax, nBits, sErrCode, nLastItemIndex, sFirstItemName) ::= <<
declare
    intVal:Asn1Int;
begin
    <rtlModuleName()>.UPER_Dec_ConstraintWholeNumber(S, K, intVal, <nMin>, <nMax>, <nBits>, result.Success);
    if result.Success THEN
        case <sTypeName>_index_range(intVal) is
            <arrsItem; separator="\n">
        end case;
        result.ErrorCode := 0;
    else
        <p> := <sFirstItemName>;
        result.ErrorCode := <sErrCode>;
    end if;
end;
>>

/* ENUMERATED START */



Sequence_optChild_encode(p, sChName, sErrCode) ::= "<rtlModuleName()>.BitStream_AppendBit(S, K,<p>.Exist.<sChName>);"
Sequence_optChild_decode(p, sChName, sErrCode) ::= <<
result.ErrorCode := <rtlModuleName()>.ERR_INSUFFICIENT_DATA;
<rtlModuleName()>.BitStream_ReadBit(S, K,<p>.Exist.<sChName>, result.Success);
>>

Sequence_always_present_optChild_encode(p, sChName, sErrCode) ::= "<rtlModuleName()>.BitStream_AppendBit(S, K,1);"
Sequence_always_present_optChild_decode(p, sChName, sErrCode) ::= <<
result.ErrorCode := <rtlModuleName()>.ERR_INSUFFICIENT_DATA;
<rtlModuleName()>.BitStream_ReadBit(S, K,<p>.Exist.<sChName>, result.Success);
>>



Sequence_Child_encode(p, sChName, bIsUperOptional, sChildContent, bHasDefaultValue) ::= <<
--Encode <sChName> 
<if(bIsUperOptional)>
if <p>.Exist.<sChName> = 1 THEN
    <sChildContent>
end if;
<else>
<sChildContent>
<endif>
>>


Sequence_Child_decode(p, sChName, bIsUperOptional, sChildContent, bHasDefaultValue) ::= <<
--Decode <sChName> 
<if(bIsUperOptional)>
if <p>.Exist.<sChName> = 1 THEN
    <sChildContent>
<if(bHasDefaultValue)>
ELSE
    <p>.exist.<sChName> := 1; --default value taken from initialize

<endif>
end if;
<else>
<sChildContent>
<endif>

>>




JoinItems_encode(sTasName, sPart, sNestedPart, nRequiredBitsSoFar, bRequiresResultCheck) ::= <<
<sPart>
<if(sNestedPart)>
--# assert K~+1>= S'First and K~ + <sTasName>_REQUIRED_BITS_FOR_ENCODING \<= S'Last AND
--#	       K>=K~ and K\<=K~+<nRequiredBitsSoFar>;	
<if(bRequiresResultCheck)>
if result.Success THEN
    <sNestedPart>
end if;
<else>
<sNestedPart>
<endif>
<endif>

>>


JoinItems_decode(sTasName, sPart, sNestedPart, nRequiredBitsSoFar, bRequiresResultCheck) ::= <<
<sPart>
<if(sNestedPart)>
--# assert K~.K+1>= S'First and K~.K + <sTasName>_REQUIRED_BITS_FOR_ENCODING \<= S'Last AND
--#	       K.K>=K~.K and K.K\<=K~.K+<nRequiredBitsSoFar>;	
if result.Success THEN
    <sNestedPart>
end if;
<endif>
>>



Sequence_encode(p, arrsChildren, sTasName, bRequiresInit) ::= <<
<if(arrsChildren)>
<arrsChildren; separator="\n">

<else>
null;

<endif>
>>


Sequence_decode(p, arrsChildren, sTasName, bRequiresInit) ::= <<
<if(bRequiresInit)>val := <sTasName>_Init;<endif>

<if(arrsChildren)>
<arrsChildren; separator="\n">

<else>
result := <rtlModuleName()>.ASN1_RESULT'(Success => TRUE, ErrorCode => 0);


<endif>
>>


ChoiceChild_encode(sTasName, sName, sChildBody, nIndex, nIndexSizeInBits, sNamePresent) ::= <<
when <sNamePresent> =>
    <rtlModuleName()>.UPER_Enc_ConstraintWholeNumber(S, K, <nIndex>, 0, <nIndexSizeInBits>);
    <sChildBody>
>>

ChoiceChild_decode(sTasName, sName, sChildBody, nIndex, nIndexSizeInBits, sNamePresent) ::= <<
when <nIndex> =>
    <sChildBody>
    if result.Success THEN
        val := <sTasName>_<sName>_set(<sName>_tmp);
    end if;
>>

ChoiceChild_tmpVar(sName, sTypeDecl) ::= "<sName>_tmp:<sTypeDecl>;"

Choice_encode(sTasName, arrsChildren, nIndexMax, nIndexSizeInBits) ::= <<
case <sTasName>_kind(val) IS
    <arrsChildren; separator="\n">
end case;
>>

Declare_ChoiceIndex()::="index:<rtlModuleName()>.Asn1Int;"
Choice_decode(sTasName, arrsChildren, nIndexMax, nIndexSizeInBits) ::= <<
val := <sTasName>_Init;
result.ErrorCode := <rtlModuleName()>.ERR_INSUFFICIENT_DATA;
<rtlModuleName()>.UPER_Dec_ConstraintWholeNumber(S, K, index, 0, <nIndexMax>, <nIndexSizeInBits>, result.Success);
if result.Success THEN
    case <sTasName>_index_range(index) IS
        <arrsChildren; separator="\n">
    end case;
end if;
>>


ReferenceType1_encode(p, sName, bAcnEncodeFuncRequiresResult) ::= "<sName>_uPER_Encode_aux(<p>, S, K<if(bAcnEncodeFuncRequiresResult)>, result<endif>);"
ReferenceType1_decode(p, sName, bAcnEncodeFuncRequiresResult) ::= "<sName>_uPER_Decode_aux(<p>, S, K, result);"

ReferenceType2_encode(p, sTasName, sName, bAcnEncodeFuncRequiresResult) ::= "<sTasName>.<sName>_uPER_Encode_aux(<p>, S, K<if(bAcnEncodeFuncRequiresResult)>, result<endif>);"
ReferenceType2_decode(p, sTasName, sName, bAcnEncodeFuncRequiresResult) ::= "<sTasName>.<sName>_uPER_Decode_aux(<p>, S, K, result);"


loopFixedItem_enc (i, fixedSize, nfixedSizeUperLimit, sInternalItem, nCurOffset, nAlignSize, nIntItemMinSize, nIntItemMaxSize)::= /*nogen*/<<    
while <i>\<= <fixedSize> loop
    pragma Loop_Invariant (<i> >=1 and <i>\<=<fixedSize>);
    pragma Loop_Invariant (K >= K'Loop_Entry);
    pragma Loop_Invariant (K\<=K'Loop_Entry + <nIntItemMaxSize>*(<i>-1));
    <sInternalItem>
    <i> := <i> + 1;
end loop;
>>


loopFixedItem_dec (i, fixedSize, nfixedSizeUperLimit, sInternalItem, nCurOffset, nAlignSize, nIntItemMinSize, nIntItemMaxSize)::= /*nogen*/<<    
while <i>\<= <fixedSize> AND result.Success loop
    pragma Loop_Invariant (<i> >=1 and <i>\<=<fixedSize>);
    pragma Loop_Invariant (K.K >= K'Loop_Entry.K);
    pragma Loop_Invariant (K.K \<= K'Loop_Entry.K + <nIntItemMaxSize>*(<i>-1));
    <sInternalItem>
    <i> := <i> + 1;
end loop;
>>



InternalItem_oct_str_encode(p, i) ::=<<
<rtlModuleName()>.BitStream_AppendByte(S, K, <p>.Data(<i>), FALSE);
>>

InternalItem_oct_str_decode(p, i) ::=<<
<rtlModuleName()>.BitStream_DecodeByte(S, K, <p>.Data(<i>), result.Success);
>>

InternalItem_bit_str_encode(p, i) ::=<<
<rtlModuleName()>.BitStream_AppendBit(S, K, <p>.Data(<i>));
>>

InternalItem_bit_str_decode(p, i) ::=<<
<rtlModuleName()>.BitStream_ReadBit(S, K, <p>.Data(<i>), result.Success);
>>


oct_sqf_FixedSize_encode(p, i, sInternalItem, nFixedSize, sTasName, nIntItemMinSize, nIntItemMaxSize, nAlignSize) ::= <<
<loopFixedItem_enc(i=i, sInternalItem=sInternalItem, fixedSize=nFixedSize, nfixedSizeUperLimit = nFixedSize, nCurOffset="0", nAlignSize=nAlignSize, nIntItemMinSize=nIntItemMinSize, nIntItemMaxSize=nIntItemMaxSize)>
>>

oct_sqf_FixedSize_decode(p, i, sInternalItem, nFixedSize, sTasName, nIntItemMinSize, nIntItemMaxSize, nAlignSize) ::= <<
val := <sTasName>_Init;
result := <rtlModuleName()>.ASN1_RESULT'(Success => TRUE, ErrorCode => 0);
<loopFixedItem_dec(i=i, sInternalItem=sInternalItem, fixedSize=nFixedSize, nfixedSizeUperLimit = nFixedSize, nCurOffset="0", nAlignSize=nAlignSize, nIntItemMinSize=nIntItemMinSize, nIntItemMaxSize=nIntItemMaxSize)>
>>


oct_sqf_VarSize_encode(sTasName, p, i, sInternalItem, nSizeMin, nSizeMax, nSizeInBits, nIntItemMinSize, nIntItemMaxSize, nAlignSize) ::= <<
<rtlModuleName()>.UPER_Enc_ConstraintWholeNumber(S, K, <rtlModuleName()>.Asn1Int(<p>.Length), <nSizeMin>, <nSizeInBits>);
<loopFixedItem_enc(i=i, sInternalItem=sInternalItem, fixedSize=[p,".Length"], nfixedSizeUperLimit = nSizeMax, nCurOffset=nSizeInBits, nAlignSize=nAlignSize, nIntItemMinSize=nIntItemMinSize, nIntItemMaxSize=nIntItemMaxSize)>
>>


Declare_Length()::="length:Integer;"

oct_sqf_VarSize_decode(sTasName, p, i, sInternalItem, nSizeMin, nSizeMax, nSizeInBits, nIntItemMinSize, nIntItemMaxSize, nAlignSize) ::= <<
val := <sTasName>_Init;
result.ErrorCode := <rtlModuleName()>.ERR_INSUFFICIENT_DATA; 
<rtlModuleName()>.UPER_Dec_ConstraintWholeNumberInt(S, K, length, <nSizeMin>, <nSizeMax>, <nSizeInBits>, result.Success);
<p>.Length := length;
<loopFixedItem_dec(i=i, sInternalItem=sInternalItem, fixedSize=[p,".Length"], nfixedSizeUperLimit = nSizeMax, nCurOffset=nSizeInBits, nAlignSize=nAlignSize, nIntItemMinSize=nIntItemMinSize, nIntItemMaxSize=nIntItemMaxSize)>
>>





/* IA5String & Numeric String */
Declare_CharValue() ::= "charIndex:Integer;"


InternalItem_string_no_alpha_encode(p, i) ::=<<
charIndex := <rtlModuleName()>.CharacterPos(<p>(<i>));
<rtlModuleName()>.UPER_Enc_ConstraintWholeNumber(S, K, <rtlModuleName()>.Asn1Int(charIndex), 0, 7);
>>


InternalItem_string_no_alpha_decode(p, i) ::=<<
<rtlModuleName()>.UPER_Dec_ConstraintWholeNumberInt(S, K, charIndex, 0, 127, 7, result.Success);
<p>(<i>) := Character'Val(charIndex);
>>


InternalItem_string_with_alpha_encode(p, sTasName, i, nLastItemIndex, arrnAlphabetAsciiCodes, nAlphabetLength, nCharIndexSize) ::=<<
charIndex := <rtlModuleName()>.GetZeroBasedCharIndex(<p>(<i>), <sTasName>_alpha_set);
<rtlModuleName()>.UPER_Enc_ConstraintWholeNumber(S, K, <rtlModuleName()>.Asn1Int(charIndex), 0, <nCharIndexSize>);
>>

InternalItem_string_with_alpha_decode(p, sTasName, i, nLastItemIndex, arrnAlphabetAsciiCodes, nAlphabetLength, nCharIndexSize) ::=<<
<rtlModuleName()>.UPER_Dec_ConstraintWholeNumberInt(S, K, charIndex, 0, <nLastItemIndex>, <nCharIndexSize>, result.Success);
<p>(<i>) := <sTasName>_alpha_set(charIndex+1);
>>




str_FixedSize_encode(p, sTasName, i, sInternalItem, nFixedSize, nIntItemMinSize, nIntItemMaxSize, nAlignSize) ::= <<
<i> := <sTasName>_index'First; 
<loopFixedItem_enc(i=i, sInternalItem=sInternalItem, fixedSize=nFixedSize, nfixedSizeUperLimit = nFixedSize, nCurOffset="0", nAlignSize=nAlignSize, nIntItemMinSize=nIntItemMinSize, nIntItemMaxSize=nIntItemMaxSize)>
>>

str_FixedSize_decode(p, sTasName, i, sInternalItem, nFixedSize, nIntItemMinSize, nIntItemMaxSize, nAlignSize) ::= <<
--val := <sTasName>_Init;
result := <rtlModuleName()>.ASN1_RESULT'(Success => TRUE, ErrorCode => 0);
<i> := <sTasName>_index'First; 
<loopFixedItem_dec(i=i, sInternalItem=sInternalItem, fixedSize=nFixedSize, nfixedSizeUperLimit = nFixedSize, nCurOffset="0", nAlignSize=nAlignSize, nIntItemMinSize=nIntItemMinSize, nIntItemMaxSize=nIntItemMaxSize)>
>>

str_VarSize_encode(p, sTasName, i, sInternalItem, nSizeMin, nSizeMax, nSizeInBits, nIntItemMinSize, nIntItemMaxSize, nAlignSize) ::= <<
nStringLength := <rtlModuleName()>.getStringSize(<p>);
result.Success := nStringLength >= <nSizeMin> AND nStringLength \<= <nSizeMax>;
<i> := <sTasName>_index'First; 
if result.Success THEN
    <rtlModuleName()>.UPER_Enc_ConstraintWholeNumber(S, K, <rtlModuleName()>.Asn1Int(nStringLength), <nSizeMin>, <nSizeInBits>);
    <loopFixedItem_enc(i=i, sInternalItem=sInternalItem, fixedSize="nStringLength", nfixedSizeUperLimit = nSizeMax, nCurOffset=nSizeInBits, nAlignSize=nAlignSize, nIntItemMinSize=nIntItemMinSize, nIntItemMaxSize=nIntItemMaxSize)>
end if;
>>

str_VarSize_decode(p, sTasName, i, sInternalItem, nSizeMin, nSizeMax, nSizeInBits, nIntItemMinSize, nIntItemMaxSize, nAlignSize) ::= <<
--val := <sTasName>_Init;
result.ErrorCode := <rtlModuleName()>.ERR_INSUFFICIENT_DATA; 
<rtlModuleName()>.UPER_Dec_ConstraintWholeNumberInt(S, K, nStringLength, <nSizeMin>, <nSizeMax>, <nSizeInBits>, result.Success);
<i> := <sTasName>_index'First; 
<loopFixedItem_dec(i=i, sInternalItem=sInternalItem, fixedSize="nStringLength", nfixedSizeUperLimit = nSizeMax, nCurOffset=nSizeInBits, nAlignSize=nAlignSize, nIntItemMinSize=nIntItemMinSize, nIntItemMaxSize=nIntItemMaxSize)>
>>


str_length(p) ::= "<rtlModuleName()>.getStringSize(<p>)"
bit_oct_sqof_length(p) ::= "<p>.Length"


Declare_nCount()::="nCount:Integer;"
Declare_curBlockSize()::="curBlockSize:Integer;"
Declare_curItem()::="curOffset:Integer:=1;"
Declare_len2()::="len2:Integer;"





Tas_fragmentation_encode(sName, arrsLocalVariables, sContent, bIsFixedSize, bResDependsOnData, bKDependsOnData, nIntItemMaxSize, sInternalItem,nUperMax, bAcnEncodeFuncRequiresResult) ::= <<
procedure <sName>_uPER_Encode_aux(val:in <sName>; S : in out <rtlModuleName()>.BitArray; K : in out Natural<if(bAcnEncodeFuncRequiresResult)>; result : OUT <rtlModuleName()>.ASN1_RESULT<endif>)
IS
    --# hide <sName>_uPER_Encode_aux;
    J:INTEGER:=1;
    <arrsLocalVariables; separator="\n">
    procedure ENCODE_BLOCK(val:in <sName>; S : in out <rtlModuleName()>.BitArray; K : in out Natural; startOffset: IN INTEGER; curBlockSize:INTEGER)
    --# derives S from S, K, val, startOffset, curBlockSize &
    --#        K from K, curBlockSize;
    --# pre curBlockSize>=0 and startOffset>=1 and startOffset+curBlockSize-1\<=<nUperMax> and
    --#     K+1 >= S'First AND K + (startOffset+curBlockSize-1)*<nIntItemMaxSize> \<= S'Last;
    --# post K>=K~ and K\<=K~ + curBlockSize*<nIntItemMaxSize>;
    IS 
        I1:INTEGER;
        J: INTEGER:=0;
    begin
        while J \<= curBlockSize-1 loop
            I1 := startOffset + J;
        --# assert  curBlockSize>=0 and startOffset>=1 and startOffset+curBlockSize-1\<=<nUperMax> and
        --#         K~+1 >= S'First AND K~ + (startOffset+curBlockSize-1)*<nIntItemMaxSize> \<= S'Last and
        --#         I1 >=startOffset and I1\<=startOffset + curBlockSize-1  and 
        --#         K>=K~ and K\<=K~+ <nIntItemMaxSize>*J and I1= startOffset + J;
            <sInternalItem>
            J := J + 1;
        end loop;
    end ENCODE_BLOCK;
begin
    <if(bAcnEncodeFuncRequiresResult)>
    result := <sName>_IsConstraintValid(val);
    if result.success THEN
        --result.ErrorCode := <rtlModuleName()>.ERR_INCORRECT_DATA;
        <sContent>
    end if;
    <else>
    <sContent>
    <endif>
end <sName>_uPER_Encode_aux;

<TasEncodeMain(sName=sName, bAcnEncodeFuncRequiresResult=bAcnEncodeFuncRequiresResult)>
>>





/*
Fragmentation_FixedSize_Fragment_encode(nLenDetValue, nLenDetSize, nOffset, nBlockSize) ::= <<
<rtlModuleName()>.UPER_Enc_ConstraintWholeNumber(S, K, <nLenDetValue>, 0, <nLenDetSize>);
ENCODE_BLOCK(val,S,K,<nOffset>,<nBlockSize>);
>>

Fragmentation_FixedSize_encode(arrsFragments) ::= <<
<arrsFragments; separator="\n">
>>
*/

Fragmentation_sqf_encode(sCount, sInternalItem, nIntItemMaxSize, nUperMax, bHasLength, sTasName) ::= <<
nCount := <sCount>;
while nCount >= 16#4000# AND J\<<sCount> loop
    if nCount >= 16#10000# THEN
        curBlockSize := 16#10000#;
        <rtlModuleName()>.UPER_Enc_ConstraintWholeNumber(S, K, 16#C4#, 0, 8);
    ELSIF nCount >= 16#C000# THEN
        curBlockSize := 16#C000#;
        <rtlModuleName()>.UPER_Enc_ConstraintWholeNumber(S, K, 16#C3#, 0, 8);
    ELSIF nCount >= 16#8000# THEN
        curBlockSize := 16#8000#;
        <rtlModuleName()>.UPER_Enc_ConstraintWholeNumber(S, K, 16#C2#, 0, 8);
    ELSE 
        curBlockSize := 16#4000#;
        <rtlModuleName()>.UPER_Enc_ConstraintWholeNumber(S, K, 16#C1#, 0, 8);
    end if;

    --# assert  K~+1>= S'First and K~ + <sTasName>_REQUIRED_BITS_FOR_ENCODING \<= S'Last AND <sCount>\<=<nUperMax> AND
    --#         curOffset = <sCount> - nCount + 1  AND nCount>= curBlockSize AND curOffset+curBlockSize-1\<=<nUperMax> and
    --#         K >= K~ AND K\<=K~+J*8+ (curOffset-1)*<nIntItemMaxSize>;

    ENCODE_BLOCK(val,S,K,curOffset,curBlockSize);

    curOffset := curOffset + curBlockSize;
    nCount := nCount - curBlockSize;

    J:=J+1;
end loop;

if nCount \<= 16#7F# THEN
    <rtlModuleName()>.UPER_Enc_ConstraintWholeNumber(S, K, <rtlModuleName()>.Asn1Int(nCount), 0, 8);
ELSE
    <rtlModuleName()>.BitStream_AppendBit(S, K, 1);
    <rtlModuleName()>.UPER_Enc_ConstraintWholeNumber(S, K, <rtlModuleName()>.Asn1Int(nCount), 0, 15);
end if;

ENCODE_BLOCK(val,S,K,curOffset,nCount);
>>

Tas_fragmentation_decode(sName, arrsLocalVariables, sContent, bIsFixedSize, bResDependsOnData, bKDependsOnData, nIntItemMaxSize, sInternalItem,nUperMax, bAcnEncodeFuncRequiresResult) ::= <<
procedure <sName>_uPER_Decode_aux(val:out <sName>; S : in <rtlModuleName()>.BitArray; K : in out <rtlModuleName()>.DECODE_PARAMS; result : OUT <rtlModuleName()>.ASN1_RESULT)
IS
    --# hide <sName>_uPER_Decode_aux;
    <arrsLocalVariables; separator="\n">
begin
    <sContent>
end <sName>_uPER_Decode_aux;

<TasDecodeMain(sName=sName)>
>>


Fragmentation_sqf_decode(sCount, sInternalItem, nIntItemMaxSize, nUperMax, bHasLength, sTasName) ::= <<
val := <sTasName>_Init;
<if(bHasLength)>length := 0;<endif>
curBlockSize := 0;
result.ErrorCode := <rtlModuleName()>.ERR_INSUFFICIENT_DATA; 
<rtlModuleName()>.UPER_Dec_ConstraintWholeNumberInt(S, K, nCount, 0, 255, 8, result.Success);

while result.Success AND (nCount = 16#C4# OR nCount = 16#C3# OR nCount = 16#C2# OR nCount = 16#C1#)  loop
    --# assert I1 >=curOffset and I1\<=curOffset + nCount ;
    if nCount = 16#C4# THEN
        curBlockSize := 16#10000#;
    ELSIF nCount = 16#C3# THEN
        curBlockSize := 16#C000#;
    ELSIF nCount = 16#C2# THEN
        curBlockSize := 16#8000#;
    ELSE 
        curBlockSize := 16#4000#;
    end if;

    I1 := curOffset;
    while I1\<= curOffset + curBlockSize - 1 AND result.Success loop
    --# assert  I1 >=curOffset and I1\<=curOffset + nCount  and 
    --#        K.K>=K~.K and K.K\<=K~.K+8+ <nIntItemMaxSize>*(I1-1);
        <sInternalItem>
        I1 := I1 + 1;
    end loop;
    <if(bHasLength)>length := length + curBlockSize;<endif>
    curOffset := curOffset + curBlockSize;
    <rtlModuleName()>.UPER_Dec_ConstraintWholeNumberInt(S, K, nCount, 0, 255, 8, result.Success);
end loop;

if nCount > 16#80# THEN
    nCount := (nCount - 16#80#) * 16#100#;
    <rtlModuleName()>.UPER_Dec_ConstraintWholeNumberInt(S, K, len2, 0, 255, 8, result.Success);
    if result.Success THEN
         nCount := nCount + len2;
    end if;
end if;

if curOffset + nCount -1 \<= <nUperMax> THEN
    I1 := curOffset;
    while I1\<= curOffset + nCount -1 loop
    --# assert  I1 >=curOffset and I1\<=curOffset + nCount  and 
    --#        K.K>=K~.K and K.K\<=K~.K+8+ <nIntItemMaxSize>*(I1-1);
        <sInternalItem>
        I1 := I1 + 1;
    end loop;
    <if(bHasLength)><sCount> := length + nCount;<endif>
end if;
>>

