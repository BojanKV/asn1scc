group a_uper;

rtlModuleName() ::= "adaasn1rtl"

call_base_type_func_encode(p, sFuncName) ::= "<sFuncName>_aux(<p>, S, K, result);"
call_base_type_func_decode(p, sFuncName) ::= "<sFuncName>_aux(<p>, S, K, result);"


EmitTypeAssignment_def_err_code(sErrCode, nErrValue) ::= <<
<sErrCode>:CONSTANT INTEGER := <nErrValue>; 
>>

EmitTypeAssignment_def_encode(sVarName, sStar, sFuncName, sTypeDefName, arrsErrcodes, bEmptyEncodingSpace, nMaxBytesInPER, nMaxBitsInPER, soSparkAnnotations) ::= <<
<arrsErrcodes; separator="\n">
<sTypeDefName>_REQUIRED_BYTES_FOR_ENCODING:CONSTANT INTEGER := <nMaxBytesInPER>;
<sTypeDefName>_REQUIRED_BITS_FOR_ENCODING:CONSTANT INTEGER := <nMaxBitsInPER>;

SUBTYPE <sTypeDefName>_uPER_bit_array_range is Natural range 1..<if(bEmptyEncodingSpace)>1<else><sTypeDefName>_REQUIRED_BITS_FOR_ENCODING<endif>;
SUBTYPE <sTypeDefName>_uPER_bit_array is <rtlModuleName()>.BitArray(<sTypeDefName>_uPER_bit_array_range);

TYPE <sTypeDefName>_uPER_Stream IS RECORD
    K	: Natural;
    DataLen	: Natural;
    Data : <sTypeDefName>_uPER_bit_array;
end RECORD;

procedure <sFuncName>(val:in <sTypeDefName>; Stream : OUT <sTypeDefName>_uPER_Stream; result : OUT <rtlModuleName()>.ASN1_RESULT);
procedure <sFuncName>_aux(<sVarName>:in <sTypeDefName>; S : in out <rtlModuleName()>.BitArray; K : in out Natural; result : OUT <rtlModuleName()>.ASN1_RESULT)
<soSparkAnnotations>;
>>

EmitTypeAssignment_def_decode(sVarName, sStar, sFuncName, sTypeDefName, arrsErrcodes, bEmptyEncodingSpace, nMaxBytesInPER, nMaxBitsInPER, soSparkAnnotations) ::= <<
<arrsErrcodes; separator="\n">
procedure <sFuncName>(<sVarName>: out <sTypeDefName>; Stream : IN <sTypeDefName>_uPER_Stream; result : OUT <rtlModuleName()>.ASN1_RESULT);
procedure <sFuncName>_aux(<sVarName>: out <sTypeDefName>; S : in <rtlModuleName()>.BitArray; K : in out <rtlModuleName()>.DECODE_PARAMS; result : OUT <rtlModuleName()>.ASN1_RESULT)
<soSparkAnnotations>;
>>

TasEncodeMain(sVarName, sFuncName, sTypeDefName) ::= /*nogen*/<<
procedure <sFuncName>(<sVarName>:in <sTypeDefName>; Stream : OUT <sTypeDefName>_uPER_Stream; result : OUT <rtlModuleName()>.ASN1_RESULT)
IS
begin
    Stream := <sTypeDefName>_uPER_Stream'(K => 0, DataLen => 0, Data => <sTypeDefName>_uPER_bit_array'(others => 0));
    <sFuncName>_aux(<sVarName>, Stream.Data, Stream.DataLen, result);
end <sFuncName>;
>>

EmitTypeAssignment_encode(sVarName, sStar, sFuncName, soIValidFuncName, sTypeDefName, arrsLocalVariables, sContent, soSparkAnnotations, sInitilialExp) ::= <<
procedure <sFuncName>_aux(<sVarName>:in <sTypeDefName>; S : in out <rtlModuleName()>.BitArray; K : in out Natural; result : OUT <rtlModuleName()>.ASN1_RESULT)
is
    <arrsLocalVariables; separator="\n">
begin
    <if(soIValidFuncName)>
    result := <soIValidFuncName>(<sVarName>);
    if result.success then
        <sContent>
    end if;
    <else>
    result := <rtlModuleName()>.ASN1_RESULT'(Success => true, ErrorCode => 0);
    <sContent>
    <endif>
end <sFuncName>_aux;

<TasEncodeMain(sVarName=sVarName, sFuncName=sFuncName, sTypeDefName=sTypeDefName)>
>>

TasDecodeMain(sVarName, sFuncName, sTypeDefName, sInitilialExp) ::= /*nogen*/<<
procedure <sFuncName>(<sVarName>:out <sTypeDefName>; Stream : IN <sTypeDefName>_uPER_Stream; result : OUT <rtlModuleName()>.ASN1_RESULT)
IS
    iter:<rtlModuleName()>.DECODE_PARAMS;
begin
    iter := <rtlModuleName()>.DECODE_PARAMS'(K => 0, DataLen => Stream.DataLen);
    --<sVarName> := <sInitilialExp>;
    <sFuncName>_aux(<sVarName>, Stream.Data, iter, result);
    result.Success := result.Success AND iter.K\<=iter.DataLen;
    <if(soIValidFuncName)>
    if result.success then
        result := <soIValidFuncName>(<sVarName>);
    end if;

    <endif>
end <sFuncName>;
>>
EmitTypeAssignment_decode(sVarName, sStar, sFuncName, soIValidFuncName, sTypeDefName, arrsLocalVariables, sContent, soSparkAnnotations, sInitilialExp) ::= <<
pragma Warnings (Off, "unused initial value of ""val""");
procedure <sFuncName>_aux(<sVarName>: out <sTypeDefName>; S : in <rtlModuleName()>.BitArray; K : in out <rtlModuleName()>.DECODE_PARAMS; result : OUT <rtlModuleName()>.ASN1_RESULT)
IS
    <arrsLocalVariables; separator="\n">
begin
    <sContent>
end <sFuncName>_aux;
pragma Warnings (On, "unused initial value of ""val""");
<TasDecodeMain(sVarName=sVarName, sFuncName=sFuncName, sTypeDefName=sTypeDefName, sInitilialExp=sInitilialExp)>
>>


/*
 depends => (
                S => (S , K, val), 
                K => (K<if(bKDependsOnValue)>, val<endif>)<if(bAcnEncodeFuncRequiresResult)> , 
                result => val 
                <endif>
            ),
*/
annotations_encode(sName, bKDependsOnValue, bAcnEncodeFuncRequiresResult, bResDependsOnData, bKDependsOnData) ::= <<
with
 pre  => S'Last >= <sName>_REQUIRED_BITS_FOR_ENCODING and then K >= S'First - 1 and then K \<= S'Last - <sName>_REQUIRED_BITS_FOR_ENCODING and then K \<= Natural'Last - <sName>_REQUIRED_BITS_FOR_ENCODING,
 post => K>=K'Old and K\<=K'Old + <sName>_REQUIRED_BITS_FOR_ENCODING
>>


/*
 depends => (
            val => (S , K) ,
            K => (K <if(bKDependsOnData)>,S<endif>),
            result => (K<if(bResDependsOnData)>,S<endif>)
            ),
*/

annotations_decode(sName, bKDependsOnValue, bAcnEncodeFuncRequiresResult, bResDependsOnData, bKDependsOnData) ::= <<
with
 pre => S'Last >= <sName>_REQUIRED_BITS_FOR_ENCODING and then K.K >= S'First - 1 and then K.K \<= S'Last - <sName>_REQUIRED_BITS_FOR_ENCODING and then K.K \<= Natural'Last - <sName>_REQUIRED_BITS_FOR_ENCODING,
 post => K.K>=K'Old.K and K.K\<=K'Old.K+<sName>_REQUIRED_BITS_FOR_ENCODING
>>





/*case: A:: = INTEGER (5..20) */
IntFullyConstraint_encode(p, nMin, nMax, nBits, sErrCode) ::= "<rtlModuleName()>.UPER_Enc_ConstraintWholeNumber(S, K, <p>, <nMin>, <nBits>);"
IntFullyConstraint_decode(p, nMin, nMax, nBits, sErrCode) ::= <<
result.ErrorCode := <sErrCode>;
<rtlModuleName()>.UPER_Dec_ConstraintWholeNumber(S, K, <p>, <nMin>, <nMax>, <nBits>, result.Success);
>>

IntFullyConstraintPos_encode(p, nMin, nMax, nBits, sErrCode) ::= "<rtlModuleName()>.UPER_Enc_ConstraintPosWholeNumber(S, K, <p>, <nMin>, <nBits>);"
IntFullyConstraintPos_decode(p, nMin, nMax, nBits, sErrCode) ::= <<
result.ErrorCode := <sErrCode>;
<rtlModuleName()>.UPER_Dec_ConstraintPosWholeNumber(S, K, <p>, <nMin>, <nMax>, <nBits>, result.Success);
>>

/*case: A :: = INTEGER */
IntUnconstraint_encode(p, sErrCode, bCoverageIgnore) ::= "<rtlModuleName()>.UPER_Enc_UnConstraintWholeNumber(S, K, <p>);"
IntUnconstraint_decode(p, sErrCode, bCoverageIgnore) ::= <<
result.ErrorCode := <sErrCode>;
<rtlModuleName()>.UPER_Dec_UnConstraintWholeNumber(S, K, <p>, result.Success);
>>

/*case: A :: = INTEGER(MIN..5) */
IntUnconstraintMax_encode(p, nMax, soCheckExp, sErrCode) ::= "<rtlModuleName()>.UPER_Enc_UnConstraintWholeNumber(S, K, <p>);"
IntUnconstraintMax_decode(p, nMax, soCheckExp, sErrCode) ::= <<
result.ErrorCode := <sErrCode>;
<rtlModuleName()>.UPER_Dec_UnConstraintWholeNumberMax(S, K, <p>, <nMax>, result.Success);
--result.Success := result.Success and then (<soCheckExp>);
>>


/*case: A:: = INTEGER (5..MAX) */
IntSemiConstraint_encode(p, nMin, sErrCode) ::= "<rtlModuleName()>.UPER_Enc_SemiConstraintWholeNumber(S, K, <p>, <nMin>);"
IntSemiConstraint_decode(p, nMin, sErrCode) ::= <<
result.ErrorCode := <sErrCode>;
<rtlModuleName()>.UPER_Dec_SemiConstraintWholeNumber(S, K, <p>, <nMin>, result.Success);
>>

IntSemiConstraintPos_encode(p, nMin, sErrCode) ::= "<rtlModuleName()>.UPER_Enc_SemiConstraintPosWholeNumber(S, K, <p>, <nMin>);"
IntSemiConstraintPos_decode(p, nMin, sErrCode) ::= <<
result.ErrorCode := <sErrCode>;
<rtlModuleName()>.UPER_Dec_SemiConstraintPosWholeNumber(S, K, <p>, <nMin>, result.Success);
>>


/*case: A:: = INTEGER (5..40,...) */
IntRootExt_encode(p, nMin, sRootBaseConstraint, sIntBody, sErrCode) ::=<<
if <sRootBaseConstraint> THEN
    <rtlModuleName()>.BitStream_AppendBit(S, K, 0); -- write extension bit
    <sIntBody>
end if;
>>

Declare_ExtensionBit()::="extBit:<rtlModuleName()>.BIT;"

IntRootExt_decode(p, nMin, sRootBaseConstraint, sIntBody, sErrCode) ::=<<
result.ErrorCode := <sErrCode>;
<p> := <nMin>;
declare
    extBit:<rtlModuleName()>.BIT;
begin
    <rtlModuleName()>.BitStream_ReadBit(S, K, extBit, result.Success); -- read extension bit
    if result.Success THEN
        if extBit=0 THEN --extBit is zero ==> value is expecteted within root range
            <sIntBody>
        else
            <IntUnconstraint_decode(p=p, sErrCode=sErrCode, bCoverageIgnore="true")>
        end if;
    end if;
end;
>>


/*case: A:: = INTEGER (5..40,..., 60..70) */
IntRootExt2_encode(p, nMin, sRootBaseConstraint, sIntBody, sErrCode) ::=<<
if <sRootBaseConstraint> THEN
    <rtlModuleName()>.BitStream_AppendBit(S, K, 0); -- value within root range, so ext bit is zero
    <sIntBody>
else
    -- value is not within root range, so ext bit is one and value is encoded as uncostraint
    <rtlModuleName()>.BitStream_AppendBit(S, K, 1);
    <IntUnconstraint_encode(p=p, sErrCode=sErrCode)>
end if;
>>

IntRootExt2_decode(p, nMin, sRootBaseConstraint, sIntBody, sErrCode) ::= "<IntRootExt_decode(p=p, nMin=nMin, sIntBody = sIntBody, sErrCode=sErrCode)>"


Null_encode(p) ::= <<
<rtlModuleName()>.Acn_Enc_NullType(S, K, <p>);
>>

Null_decode(p) ::= <<
<rtlModuleName()>.Acn_Dec_NullType(S, K, <p>, result);
>>

Boolean_encode(p, sErrCode) ::= "<rtlModuleName()>.UPER_Enc_Boolean(S, K, <p>);"

Boolean_decode(p, sErrCode) ::= <<
result.ErrorCode := <sErrCode>;
<rtlModuleName()>.UPER_Dec_boolean(S, K, <p>, result.Success);
>>

Real_encode(p, sErrCode) ::= "<rtlModuleName()>.UPER_Enc_Real(S, K, <p>);"
Real_decode(p, sErrCode) ::= <<
<rtlModuleName()>.UPER_Dec_Real(S, K, <p>, result);
>>


Declare_EnumIndex()::="intVal:<rtlModuleName()>.Asn1Int;"

Declare_AsnIntForMappingFuncion()::="mapFuncIntVal:<rtlModuleName()>.Asn1Int;"

/* ENUMERATED START */

Enumerated_item_encode(p, sName, nIndex, nLastItemIndex) ::= "when <sName>    => intVal := <nIndex>;"

Enumerated_item_decode(p, sName, nIndex, nLastItemIndex) ::= "when <nIndex> => <p> := <sName>;"


Enumerated_encode(p, sTypeName, arrsItem, nMin, nMax, nBits, sErrCode, nLastItemIndex, sFirstItemName) ::= <<
declare
    intVal:Asn1Int;
begin
    case <p> is 
        <arrsItem; separator="\n">
    end case;
    <rtlModuleName()>.UPER_Enc_ConstraintWholeNumber(S, K, intVal, <nMin>, <nBits>);
end;
>>

Enumerated_decode(p, sTypeName, arrsItem, nMin, nMax, nBits, sErrCode, nLastItemIndex, sFirstItemName) ::= <<
declare
    intVal:Asn1Int;
begin
    <rtlModuleName()>.UPER_Dec_ConstraintWholeNumber(S, K, intVal, <nMin>, <nMax>, <nBits>, result.Success);
    if result.Success THEN
        case <sTypeName>_index_range(intVal) is
            <arrsItem; separator="\n">
        end case;
        result.ErrorCode := 0;
    else
        <p> := <sFirstItemName>;
        result.ErrorCode := <sErrCode>;
    end if;
end;
>>

/* ENUMERATED START */

/* SEQUENCE START */


sequence_presence_bit_encode(p, sAcc, sChName, sErrCode) ::= "<rtlModuleName()>.BitStream_AppendBit(S, K,<p>.Exist.<sChName>);"
sequence_presence_bit_decode(p, sAcc, sChName, sErrCode) ::= <<
result.ErrorCode := <sErrCode>;
<rtlModuleName()>.BitStream_ReadBit(S, K,<p>.Exist.<sChName>, result.Success);
>>


sequence_presence_bit_fix_encode(p, sAcc, sChName, sErrCode, sVal) ::= "<rtlModuleName()>.BitStream_AppendBit(S, K, <sVal>);"
sequence_presence_bit_fix_decode(p, sAcc, sChName, sErrCode, sVal) ::= <<
<sequence_presence_bit_decode(p=p, sAcc=sAcc, sChName=sChName, sErrCode=sErrCode)>
>>


sequence_mandatory_child_encode(sChName, sChildContent) ::= <<
--Encode <sChName> 
<sChildContent>
>>

sequence_mandatory_child_decode(sChName, sChildContent) ::= <<
--Decode <sChName> 
<sChildContent>
>>


sequence_optional_child_encode(p, sAcc, sChName, sChildContent) ::= <<
--Encode <sChName> 
if <p>.Exist.<sChName> = 1 then
	<sChildContent>
end if;
>>

sequence_optional_child_decode(p, sAcc, sChName, sChildContent) ::= <<
--Decode <sChName> 
if <p>.Exist.<sChName> = 1 then
	<sChildContent>
end if;
>>


sequence_default_child_encode(p, sAcc, sChName, sChildContent, sInitWithDefaultValue) ::= <<
<sequence_optional_child_encode(p=p, sAcc=sAcc, sChName=sChName, sChildContent=sChildContent)>
>>


sequence_default_child_decode(p, sAcc, sChName, sChildContent, sInitWithDefaultValue) ::= <<
--Decode <sChName> 
if <p>.Exist.<sChName> = 1 then
	<sChildContent>
else
    <sInitWithDefaultValue>
end if;
>>


JoinItems(sPart, soNestedPart) ::= <<
<sPart>
<if(soNestedPart)>
if result.Success then
    <soNestedPart>
end if;
<endif>
>>


JoinItems0_encode(sTasName, sPart, sNestedPart, nRequiredBitsSoFar, bRequiresResultCheck) ::= <<
<sPart>
<if(sNestedPart)>
--# assert K~+1>= S'First and K~ + <sTasName>_REQUIRED_BITS_FOR_ENCODING \<= S'Last AND
--#	       K>=K~ and K\<=K~+<nRequiredBitsSoFar>;	
<if(bRequiresResultCheck)>
if result.Success THEN
    <sNestedPart>
end if;
<else>
<sNestedPart>
<endif>
<endif>

>>


JoinItems0_decode(sTasName, sPart, sNestedPart, nRequiredBitsSoFar, bRequiresResultCheck) ::= <<
<sPart>
<if(sNestedPart)>
--# assert K~.K+1>= S'First and K~.K + <sTasName>_REQUIRED_BITS_FOR_ENCODING \<= S'Last AND
--#	       K.K>=K~.K and K.K\<=K~.K+<nRequiredBitsSoFar>;	
if result.Success THEN
    <sNestedPart>
end if;
<endif>
>>
/* SEQUENCE END */



/* CHOICE START*/

choice_child_encode(p, sAcc, sChildID, nChildIndex, nIndexSizeInBits, nLastItemIndex, sChildContent, sChildName, sChildTypeDef, sChoiceTypeName) ::= <<
when <sChildID> =>
    <rtlModuleName()>.UPER_Enc_ConstraintWholeNumber(S, K, <nChildIndex>, 0, <nIndexSizeInBits>);
    <sChildContent>
>>

choice_child_decode(p, sAcc, sChildID, nChildIndex, nIndexSizeInBits, nLastItemIndex, sChildContent, sChildName, sChildTypeDef, sChoiceTypeName) ::= <<
when <nChildIndex> =>
  declare
     <sChildName>_tmp:<sChildTypeDef>;
  begin
    <sChildContent>
    if result.Success THEN
        <p> := <sChoiceTypeName>'(kind => <sChildID>, <sChildName> => <sChildName>_tmp);
        pragma Annotate (GNATprove, False_Positive,"discriminant check might fail", "reviewed by GM");
    end if;
  end;
>>


choice_encode(p, sAcc, arrsChildren, nLastItemIndex, sChoiceIndexName, sErrCode, sChoiceTypeDef, nIndexSizeInBits) ::= <<
case <p><sAcc>kind IS
    <arrsChildren; separator="\n">
end case;
>>

choice_decode(p, sAcc, arrsChildren, nLastItemIndex, sChoiceIndexName, sErrCode, sChoiceTypeDef, nIndexSizeInBits) ::= <<
result.ErrorCode := <sErrCode>;
<rtlModuleName()>.UPER_Dec_ConstraintWholeNumber(S, K, <sChoiceIndexName>, 0, <nLastItemIndex>, <nIndexSizeInBits>, result.Success);
if result.Success AND <sChoiceIndexName> \>= 0 AND  <sChoiceIndexName> \<= <nLastItemIndex> THEN
    case <sChoiceTypeDef>_index_range(<sChoiceIndexName>) IS
        <arrsChildren; separator="\n">
    end case;
end if;
>>

/* CHOICE END*/



ChoiceChild_tmpVar(sName, sTypeDecl) ::= "<sName>_tmp:<sTypeDecl>;"


Declare_ChoiceIndex()::="index:<rtlModuleName()>.Asn1Int;"


ReferenceType1_encode(p, sName, bAcnEncodeFuncRequiresResult) ::= "<sName>_uPER_Encode_aux(<p>, S, K<if(bAcnEncodeFuncRequiresResult)>, result<endif>);"
ReferenceType1_decode(p, sName, bAcnEncodeFuncRequiresResult) ::= "<sName>_uPER_Decode_aux(<p>, S, K, result);"

ReferenceType2_encode(p, sTasName, sName, bAcnEncodeFuncRequiresResult) ::= "<sTasName>.<sName>_uPER_Encode_aux(<p>, S, K<if(bAcnEncodeFuncRequiresResult)>, result<endif>);"
ReferenceType2_decode(p, sTasName, sName, bAcnEncodeFuncRequiresResult) ::= "<sTasName>.<sName>_uPER_Decode_aux(<p>, S, K, result);"


loopFixedItem_enc (i, fixedSize, nfixedSizeUperLimit, sInternalItem, nCurOffset, nAlignSize, nIntItemMinSize, nIntItemMaxSize)::= /*nogen*/<<    
while <i>\<= <fixedSize> loop
    pragma Loop_Invariant (<i> >=1 and <i>\<=<fixedSize>);
    pragma Loop_Invariant (K >= K'Loop_Entry);
    pragma Loop_Invariant (K\<=K'Loop_Entry + <nIntItemMaxSize>*(<i>-1));
    <sInternalItem>
    <i> := <i> + 1;
end loop;
>>


loopFixedItem_dec (i, fixedSize, nfixedSizeUperLimit, sInternalItem, nCurOffset, nAlignSize, nIntItemMinSize, nIntItemMaxSize)::= /*nogen*/<<    
while <i>\<= <fixedSize> AND result.Success loop
    pragma Loop_Invariant (<i> >=1 and <i>\<=<fixedSize>);
    pragma Loop_Invariant (K.K >= K'Loop_Entry.K);
    pragma Loop_Invariant (K.K \<= K'Loop_Entry.K + <nIntItemMaxSize>*(<i>-1));
    <sInternalItem>
    <i> := <i> + 1;
end loop;
>>






oct_sqf_FixedSize_encode(p, i, sInternalItem, nFixedSize, sTasName, nIntItemMinSize, nIntItemMaxSize, nAlignSize) ::= <<
<loopFixedItem_enc(i=i, sInternalItem=sInternalItem, fixedSize=nFixedSize, nfixedSizeUperLimit = nFixedSize, nCurOffset="0", nAlignSize=nAlignSize, nIntItemMinSize=nIntItemMinSize, nIntItemMaxSize=nIntItemMaxSize)>
>>

oct_sqf_FixedSize_decode(p, i, sInternalItem, nFixedSize, sTasName, nIntItemMinSize, nIntItemMaxSize, nAlignSize) ::= <<
val := <sTasName>_Init;
result := <rtlModuleName()>.ASN1_RESULT'(Success => TRUE, ErrorCode => 0);
<loopFixedItem_dec(i=i, sInternalItem=sInternalItem, fixedSize=nFixedSize, nfixedSizeUperLimit = nFixedSize, nCurOffset="0", nAlignSize=nAlignSize, nIntItemMinSize=nIntItemMinSize, nIntItemMaxSize=nIntItemMaxSize)>
>>


oct_sqf_VarSize_encode(sTasName, p, i, sInternalItem, nSizeMin, nSizeMax, nSizeInBits, nIntItemMinSize, nIntItemMaxSize, nAlignSize) ::= <<
<rtlModuleName()>.UPER_Enc_ConstraintWholeNumber(S, K, <rtlModuleName()>.Asn1Int(<p>.Length), <nSizeMin>, <nSizeInBits>);
<loopFixedItem_enc(i=i, sInternalItem=sInternalItem, fixedSize=[p,".Length"], nfixedSizeUperLimit = nSizeMax, nCurOffset=nSizeInBits, nAlignSize=nAlignSize, nIntItemMinSize=nIntItemMinSize, nIntItemMaxSize=nIntItemMaxSize)>
>>


Declare_Length()::="length:Integer;"

oct_sqf_VarSize_decode(sTasName, p, i, sInternalItem, nSizeMin, nSizeMax, nSizeInBits, nIntItemMinSize, nIntItemMaxSize, nAlignSize) ::= <<
val := <sTasName>_Init;
result.ErrorCode := <rtlModuleName()>.ERR_INSUFFICIENT_DATA; 
<rtlModuleName()>.UPER_Dec_ConstraintWholeNumberInt(S, K, length, <nSizeMin>, <nSizeMax>, <nSizeInBits>, result.Success);
<p>.Length := length;
<loopFixedItem_dec(i=i, sInternalItem=sInternalItem, fixedSize=[p,".Length"], nfixedSizeUperLimit = nSizeMax, nCurOffset=nSizeInBits, nAlignSize=nAlignSize, nIntItemMinSize=nIntItemMinSize, nIntItemMaxSize=nIntItemMaxSize)>
>>





/* IA5String & Numeric String */
Declare_CharValue() ::= "charIndex:Integer;"


InternalItem_string_no_alpha_encode(p, sErrCode, i) ::=<<
charIndex := <rtlModuleName()>.CharacterPos(<p>(<i>));
<rtlModuleName()>.UPER_Enc_ConstraintWholeNumber(S, K, <rtlModuleName()>.Asn1Int(charIndex), 0, 7);
>>


InternalItem_string_no_alpha_decode(p, sErrCode, i) ::=<<
<rtlModuleName()>.UPER_Dec_ConstraintWholeNumberInt(S, K, charIndex, 0, 127, 7, result.Success);
result.ErrorCode := <sErrCode>;
<p>(<i>) := Character'Val(charIndex);
>>


InternalItem_string_with_alpha_encode(p, sErrCode, sTasName, i, nLastItemIndex, arrnAlphabetAsciiCodes, nAlphabetLength, nCharIndexSize) ::=<<
charIndex := <rtlModuleName()>.GetZeroBasedCharIndex(<p>(<i>), <sTasName>_alpha_set);
<rtlModuleName()>.UPER_Enc_ConstraintWholeNumber(S, K, <rtlModuleName()>.Asn1Int(charIndex), 0, <nCharIndexSize>);
>>

InternalItem_string_with_alpha_decode(p, sErrCode, sTasName, i, nLastItemIndex, arrnAlphabetAsciiCodes, nAlphabetLength, nCharIndexSize) ::=<<
<rtlModuleName()>.UPER_Dec_ConstraintWholeNumberInt(S, K, charIndex, 0, <nLastItemIndex>, <nCharIndexSize>, result.Success);
result.ErrorCode := <sErrCode>;
<p>(<i>) := <sTasName>_alpha_set(charIndex+1);
>>




str_FixedSize_encode(p, sTasName, i, sInternalItem, nFixedSize, nIntItemMinSize, nIntItemMaxSize, nAlignSize) ::= <<
<i> := 1; 
<loopFixedItem_enc(i=i, sInternalItem=sInternalItem, fixedSize=nFixedSize, nfixedSizeUperLimit = nFixedSize, nCurOffset="0", nAlignSize=nAlignSize, nIntItemMinSize=nIntItemMinSize, nIntItemMaxSize=nIntItemMaxSize)>
>>

str_FixedSize_decode(p, sTasName, i, sInternalItem, nFixedSize, nIntItemMinSize, nIntItemMaxSize, nAlignSize) ::= <<
--val := <sTasName>_Init;
result := <rtlModuleName()>.ASN1_RESULT'(Success => TRUE, ErrorCode => 0);
<i> := 1; 
<loopFixedItem_dec(i=i, sInternalItem=sInternalItem, fixedSize=nFixedSize, nfixedSizeUperLimit = nFixedSize, nCurOffset="0", nAlignSize=nAlignSize, nIntItemMinSize=nIntItemMinSize, nIntItemMaxSize=nIntItemMaxSize)>
<p>(<nFixedSize> + 1) := adaasn1rtl.NUL;
>>

str_VarSize_encode(p, sTasName, i, sInternalItem, nSizeMin, nSizeMax, nSizeInBits, nIntItemMinSize, nIntItemMaxSize, nAlignSize) ::= <<
nStringLength := <rtlModuleName()>.getStringSize(<p>);
result.Success := nStringLength >= <nSizeMin> AND nStringLength \<= <nSizeMax>;
<i> := 1; 
if result.Success THEN
    <rtlModuleName()>.UPER_Enc_ConstraintWholeNumber(S, K, <rtlModuleName()>.Asn1Int(nStringLength), <nSizeMin>, <nSizeInBits>);
    <loopFixedItem_enc(i=i, sInternalItem=sInternalItem, fixedSize="nStringLength", nfixedSizeUperLimit = nSizeMax, nCurOffset=nSizeInBits, nAlignSize=nAlignSize, nIntItemMinSize=nIntItemMinSize, nIntItemMaxSize=nIntItemMaxSize)>
end if;
>>

str_VarSize_decode(p, sTasName, i, sInternalItem, nSizeMin, nSizeMax, nSizeInBits, nIntItemMinSize, nIntItemMaxSize, nAlignSize) ::= <<
--val := <sTasName>_Init;
result.ErrorCode := <rtlModuleName()>.ERR_INSUFFICIENT_DATA; 
<rtlModuleName()>.UPER_Dec_ConstraintWholeNumberInt(S, K, nStringLength, <nSizeMin>, <nSizeMax>, <nSizeInBits>, result.Success);
<i> := 1; 
<loopFixedItem_dec(i=i, sInternalItem=sInternalItem, fixedSize="nStringLength", nfixedSizeUperLimit = nSizeMax, nCurOffset=nSizeInBits, nAlignSize=nAlignSize, nIntItemMinSize=nIntItemMinSize, nIntItemMaxSize=nIntItemMaxSize)>

--add nulls until the end
while <i>\<= <nSizeMax> + 1  loop
    pragma Loop_Invariant (<i> >=1 and <i>\<=<nSizeMax> + 1);
    <p>(<i>) := adaasn1rtl.NUL;
    <i> := <i> + 1;
end loop;
>>


str_length(p) ::= "<rtlModuleName()>.getStringSize(<p>)"
bit_oct_sqof_length(p) ::= "<p>.Length"


/* OCTET AND BIT STRING*/

InternalItem_bit_str_encode(p, i, sErrCode) ::=<<
<rtlModuleName()>.BitStream_AppendBit(S, K, <p>.Data(<i>));
>>

InternalItem_bit_str_decode(p, i, sErrCode) ::=<<
<rtlModuleName()>.BitStream_ReadBit(S, K, <p>.Data(<i>), result.Success);
if not result.Success then
    result.errorcode := <sErrCode>;
end if;
>>

InternalItem_oct_str_encode(p, sAcc, i, sErrCode) ::=<<
<rtlModuleName()>.BitStream_AppendByte(S, K, <p>.Data(<i>), FALSE);
>>

InternalItem_oct_str_decode(p, sAcc, i, sErrCode) ::=<<
<rtlModuleName()>.BitStream_DecodeByte(S, K, <p>.Data(<i>), result.Success);
if not result.Success then
    result.errorcode := <sErrCode>;
end if;
>>

octect_FixedSize_encode(p, sTasName, i, sInternalItem, nFixedSize, nIntItemMinSize, nIntItemMaxSize, nAlignSize) ::= <<
<i> := 1; 
<loopFixedItem_enc(i=i, sInternalItem=sInternalItem, fixedSize=nFixedSize, nfixedSizeUperLimit = nFixedSize, nCurOffset="0", nAlignSize=nAlignSize, nIntItemMinSize=nIntItemMinSize, nIntItemMaxSize=nIntItemMaxSize)>
>>

octect_FixedSize_decode(p, sTasName, i, sInternalItem, nFixedSize, nIntItemMinSize, nIntItemMaxSize, nAlignSize) ::= <<
result := <rtlModuleName()>.ASN1_RESULT'(Success => TRUE, ErrorCode => 0);
<i> := 1; 
<loopFixedItem_dec(i=i, sInternalItem=sInternalItem, fixedSize=nFixedSize, nfixedSizeUperLimit = nFixedSize, nCurOffset="0", nAlignSize=nAlignSize, nIntItemMinSize=nIntItemMinSize, nIntItemMaxSize=nIntItemMaxSize)>
>>

octect_VarSize_encode(p, sAcc, sTasName, i, sInternalItem, nSizeMin, nSizeMax, nSizeInBits, nIntItemMinSize, nIntItemMaxSize, nAlignSize, sErrCode) ::= <<
result.Success := <p><sAcc>Length >= <nSizeMin> AND <p><sAcc>Length \<= <nSizeMax>;
result.errorCode := <sErrCode>;
<i> := 1; 
if result.Success THEN
    <rtlModuleName()>.UPER_Enc_ConstraintWholeNumber(S, K, <rtlModuleName()>.Asn1Int(<p><sAcc>Length), <nSizeMin>, <nSizeInBits>);
    <loopFixedItem_enc(i=i, sInternalItem=sInternalItem, fixedSize=[p, sAcc, "Length"], nfixedSizeUperLimit = nSizeMax, nCurOffset=nSizeInBits, nAlignSize=nAlignSize, nIntItemMinSize=nIntItemMinSize, nIntItemMaxSize=nIntItemMaxSize)>
end if;
>>

octect_VarSize_decode(p, sAcc, sTasName, i, sInternalItem, nSizeMin, nSizeMax, nSizeInBits, nIntItemMinSize, nIntItemMaxSize, nAlignSize, sErrCode) ::= <<
<rtlModuleName()>.UPER_Dec_ConstraintWholeNumberInt(S, K, nStringLength, <nSizeMin>, <nSizeMax>, <nSizeInBits>, result.Success);
result.errorCode := <sErrCode>;
<i> := 1; 
<p>.Length := nStringLength;
<loopFixedItem_dec(i=i, sInternalItem=sInternalItem, fixedSize=[p, sAcc, "Length"], nfixedSizeUperLimit = nSizeMax, nCurOffset=nSizeInBits, nAlignSize=nAlignSize, nIntItemMinSize=nIntItemMinSize, nIntItemMaxSize=nIntItemMaxSize)>
>>





Declare_nCount()::="nCount:Integer;"
Declare_curBlockSize()::="curBlockSize:Integer;"
Declare_curItem()::="curOffset:Integer:=1;"
Declare_len2()::="len2:Integer;"



/*
    -- set1
    --# assert  K~+1>= S'First and K~ + <nRequiredBitsForUPerEncoding> \<= S'Last and <if(bIsVariableSize)><p><sAcc>Length<else><nSizeMax><endif>\<=<nSizeMax> and
    --#         <sCurOffset> = <if(bIsVariableSize)><p><sAcc>Length<else><nSizeMax><endif> - <sRemainingItemsVar> + 1  and <sRemainingItemsVar>>= <sCurBlockSize> and <sCurOffset>+<sCurBlockSize>-1\<=<nSizeMax> and
    --#         K >= K~ and K\<=K~+<sBlockIndex>*8+ (<sCurOffset>-1)*<nIntItemMaxSize>;
        
        --set2
		--# assert  <sCurBlockSize>>=0 and <sCurOffset> >= 1 and <sCurOffset>+<sCurBlockSize>-1\<=<nSizeMax> and
		--#         K~+1 >= S'First and K~ + (<sCurOffset>+<sCurBlockSize>-1)*<nIntItemMaxSize> \<= S'Last and
		--#         <sBLI> >=<sCurOffset> and <sBLI>\<=<sCurOffset> + <sCurBlockSize>-1  and 
		--#         K>=K~ and K\<=K~+ <nIntItemMaxSize>*<sBLJ> and <sBLI>= <sCurOffset> + <sBLJ>;

    --set3
	--# assert  <sCurBlockSize>>=0 and <sCurOffset>>=1 and <sCurOffset>+<sCurBlockSize>-1\<=<nSizeMax> and
	--#         K~+1 >= S'First and K~ + (<sCurOffset>+<sCurBlockSize>-1)*<nIntItemMaxSize> \<= S'Last and
	--#         <sBLI> >=<sCurOffset> and <sBLI>\<=<sCurOffset> + <sCurBlockSize>-1  and 
	--#         K>=K~ and K\<=K~+ <nIntItemMaxSize>*<sBLJ> and <sBLI>= <sCurOffset> + <sBLJ>;

*/

Fragmentation_sqf_encode(p, sAcc, sInternalItem, nIntItemMaxSize, nSizeMin, nSizeMax, nRequiredBitsForUPerEncoding, bIsVariableSize, sErrCodeName, sRemainingItemsVar, sCurBlockSize, sBlockIndex, sCurOffset, sBLJ, sBLI, sLengthTmp, bIsBitStringType, bIsAsciiString) ::= <<
<sCurOffset> := 1;
<sRemainingItemsVar> := <if(bIsAsciiString)><rtlModuleName()>.getStringSize(<p>)<else><if(bIsVariableSize)><p><sAcc>Length<else><nSizeMax><endif><endif>;
<sBlockIndex>:=1;
while <sRemainingItemsVar> >= 16#4000# and <sBlockIndex> \< <if(bIsAsciiString)><rtlModuleName()>.getStringSize(<p>)<else><if(bIsVariableSize)><p><sAcc>Length<else><nSizeMax><endif><endif> loop
    if <sRemainingItemsVar> >= 16#10000# then
        <sCurBlockSize> := 16#10000#;
        <rtlModuleName()>.UPER_Enc_ConstraintWholeNumber(S, K, 16#C4#, 0, 8);
    elsif <sRemainingItemsVar> >= 16#C000# then
        <sCurBlockSize> := 16#C000#;
        <rtlModuleName()>.UPER_Enc_ConstraintWholeNumber(S, K, 16#C3#, 0, 8);
    elsif <sRemainingItemsVar> >= 16#8000# then
        <sCurBlockSize> := 16#8000#;
        <rtlModuleName()>.UPER_Enc_ConstraintWholeNumber(S, K, 16#C2#, 0, 8);
    else 
        <sCurBlockSize> := 16#4000#;
        <rtlModuleName()>.UPER_Enc_ConstraintWholeNumber(S, K, 16#C1#, 0, 8);
    end if;

    -- set1

	<sBLJ> := 0;
	while <sBLJ> \<= <sCurBlockSize>-1 loop
		<sBLI> := <sCurOffset> + <sBLJ>;
        -- set2
		<sInternalItem>
		<sBLJ> := <sBLJ> + 1;
	end loop;
    <sCurOffset> := <sCurOffset> + <sCurBlockSize>;
    <sRemainingItemsVar> := <sRemainingItemsVar> - <sCurBlockSize>;

    <sBlockIndex>:=<sBlockIndex>+1;
end loop;

if <sRemainingItemsVar> \<= 16#7F# then
    <rtlModuleName()>.UPER_Enc_ConstraintWholeNumber(S, K, <rtlModuleName()>.Asn1Int(<sRemainingItemsVar>), 0, 8);
else
    <rtlModuleName()>.BitStream_AppendBit(S, K, 1);
    <rtlModuleName()>.UPER_Enc_ConstraintWholeNumber(S, K, <rtlModuleName()>.Asn1Int(<sRemainingItemsVar>), 0, 15);
end if;

<sBLJ> := 0;
<sCurBlockSize> := <sRemainingItemsVar>;
while <sBLJ> \<= <sCurBlockSize>-1 loop
	<sBLI> := <sCurOffset> + <sBLJ>;
    --set3
	<sInternalItem>
	<sBLJ> := <sBLJ> + 1;
end loop;

>>




Fragmentation_sqf_decode(p, sAcc, sInternalItem, nIntItemMaxSize, nSizeMin, nSizeMax, nRequiredBitsForUPerEncoding, bIsVariableSize, sErrCodeName, sRemainingItemsVar, sCurBlockSize, sBlockIndex, sCurOffset, sBLJ, sBLI, sLengthTmp, bIsBitStringType, bIsAsciiString) ::= <<
<if(bIsVariableSize)><sLengthTmp> := 0;<endif>
<sCurBlockSize> := 0;
result.ErrorCode := <sErrCodeName>; 
-- decode blockSize
<rtlModuleName()>.UPER_Dec_ConstraintWholeNumberInt(S, K, <sRemainingItemsVar>, 0, 255, 8, result.Success);
<sCurOffset> := 1;

while result.Success AND (<sRemainingItemsVar> = 16#C4# OR <sRemainingItemsVar> = 16#C3# OR <sRemainingItemsVar> = 16#C2# OR <sRemainingItemsVar> = 16#C1#)  loop
    --# assert <sBLI> >=<sCurOffset> and <sBLI>\<=<sCurOffset> + <sRemainingItemsVar> ;
    if <sRemainingItemsVar> = 16#C4# THEN
        <sCurBlockSize> := 16#10000#;
    elsif <sRemainingItemsVar> = 16#C3# THEN
        <sCurBlockSize> := 16#C000#;
    elsif <sRemainingItemsVar> = 16#C2# THEN
        <sCurBlockSize> := 16#8000#;
    else 
        <sCurBlockSize> := 16#4000#;
    end if;

    <sBLI> := <sCurOffset>;
    while <sBLI>\<= <sCurOffset> + <sCurBlockSize> - 1 AND result.Success loop
    --# assert  <sBLI> >=<sCurOffset> and <sBLI>\<=<sCurOffset> + <sRemainingItemsVar>  and 
    --#        K.K>=K~.K and K.K\<=K~.K+8+ <nIntItemMaxSize>*(<sBLI>-1);
        <sInternalItem>
        <sBLI> := <sBLI> + 1;
    end loop;
    <if(bIsVariableSize)><sLengthTmp> := <sLengthTmp> + <sCurBlockSize>;<endif>
    <sCurOffset> := <sCurOffset> + <sCurBlockSize>;
    <rtlModuleName()>.UPER_Dec_ConstraintWholeNumberInt(S, K, <sRemainingItemsVar>, 0, 255, 8, result.Success);
end loop;

if <sRemainingItemsVar> > 16#80# THEN
    declare
        len2:Integer;
    begin
        <sRemainingItemsVar> := (<sRemainingItemsVar> - 16#80#) * 16#100#;
        <rtlModuleName()>.UPER_Dec_ConstraintWholeNumberInt(S, K, len2, 0, 255, 8, result.Success);
        if result.Success THEN
             <sRemainingItemsVar> := <sRemainingItemsVar> + len2;
        end if;
    end;
end if;

if <sCurOffset> + <sRemainingItemsVar> -1 \<= <nSizeMax> THEN
    <sBLI> := <sCurOffset>;
    while <sBLI>\<= <sCurOffset> + <sRemainingItemsVar> -1 loop
    --# assert  <sBLI> >=<sCurOffset> and <sBLI>\<=<sCurOffset> + <sRemainingItemsVar>  and 
    --#        K.K>=K~.K and K.K\<=K~.K+8+ <nIntItemMaxSize>*(<sBLI>-1);
        <sInternalItem>
        <sBLI> := <sBLI> + 1;
    end loop;
    <if(bIsVariableSize)><sLengthTmp> := <sLengthTmp> + <sRemainingItemsVar>;<endif>
end if;

<if(bIsVariableSize)>
    
if <sLengthTmp> >= <nSizeMin> and <sLengthTmp> \<= <nSizeMax> then
    <if(!bIsAsciiString)>
    <p><sAcc>Length := <sLengthTmp>;

    <else>
    <p>(<sLengthTmp> + 1) := adaasn1rtl.NUL;

    --add nulls until the end
    while <sBLI>\<= <nSizeMax> + 1  loop
        pragma Loop_Invariant (<sBLI> >=1 and <sBLI>\<=<nSizeMax> + 1);
        <p>(<sBLI>) := adaasn1rtl.NUL;
        <sBLI> := <sBLI> + 1;
    end loop;


    <endif>
else
    result.Success := false;
end if;

<else>
<if(bIsAsciiString)>
<p>(<nSizeMax> + 1) := adaasn1rtl.NUL;

<endif>
    
<endif>
>>
