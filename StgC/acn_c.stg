
group c_acn;




EmitTypeAssignment_def_err_code(sErrCode, nErrValue) ::= <<
#define <sErrCode>		<nErrValue>  /**/
>>

EmitAcnParameter(sName, sType) ::= "<sType> <sName>"


EmitTypeAssignment_primitive_def_encode(sVarName, sStar, sFuncName, sTypeDefName, arrsErrcodes, bEmptyEncodingSpace, nMaxBytesInACN, nMaxBitsInACN, arrsAcnPrms) ::= <<
<arrsErrcodes; separator="\n">
#define <sTypeDefName>_REQUIRED_BYTES_FOR_ACN_ENCODING       <nMaxBytesInACN> 
#define <sTypeDefName>_REQUIRED_BITS_FOR_ACN_ENCODING        <nMaxBitsInACN>

flag <sFuncName>(const <sTypeDefName><sStar> <sVarName>, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
>>

EmitTypeAssignment_primitive_encode(sVarName, sStar, sFuncName, soIValidFuncName, sTypeDefName, arrsLocalVariables, sContent, soSparkAnnotations, sInitilialExp, arrsAcnPrms) ::= <<
flag <sFuncName>(const <sTypeDefName><sStar> <sVarName>, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints)
{
    flag ret = TRUE;
	<arrsLocalVariables:{lv|<lv>}; separator="\n">
    <if(soIValidFuncName)>
	ret = bCheckConstraints ? <soIValidFuncName>(<sVarName>, pErrCode) : TRUE ;
	if (ret) {
	    <sContent>
    }

    <else>
    *pErrCode = 0;
    bCheckConstraints=bCheckConstraints;
    <sContent>

    <endif>
	
    return ret;
}
>>

EmitTypeAssignment_primitive_def_decode(sVarName, sStar, sFuncName, sTypeDefName, arrsErrcodes, bEmptyEncodingSpace, nMaxBytesInACN, nMaxBitsInACN, arrsAcnPrms) ::= <<
<arrsErrcodes; separator="\n">
flag <sFuncName>(<sTypeDefName><sStar> <sVarName>, BitStream* pBitStrm, int* pErrCode<if(arrsAcnPrms)>, <arrsAcnPrms; separator=", "><endif>);
>>

EmitTypeAssignment_primitive_decode(sVarName, sStar, sFuncName, soIValidFuncName, sTypeDefName, arrsLocalVariables, sContent, soSparkAnnotations, sInitilialExp, arrsAcnPrms) ::= <<
flag <sFuncName>(<sTypeDefName><sStar> <sVarName>, BitStream* pBitStrm, int* pErrCode<if(arrsAcnPrms)>, <arrsAcnPrms; separator=", "><endif>)
{
    flag ret = TRUE;
	<arrsLocalVariables:{lv|<lv>}; separator="\n">

	<sContent>

	return ret;
}
>>












A() ::= "*pErrCode = ret ? 0 : ERR_INSUFFICIENT_DATA;"

MF(soMF) ::= <<
<if(soMF)>
if (ret) {
    *<p> = <soMF>_decode(*<p>);
}

<endif>
>>

TasPrimitiveDefinition_encode(sFuncName, sTypeDefName, arrsExtraParams) ::= <<
flag <sFuncName>(const <sTypeDefName> val1, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints<if(arrsExtraParams)>, <arrsExtraParams; separator=", "><endif>);
>>

TasPrimitive_encode(sFuncName, sTypeDefName, arrsLocalVariables, sContent,  arrsExtraParams) ::= <<
flag <sFuncName>(const <sTypeDefName> val1, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints<if(arrsExtraParams)>, <arrsExtraParams; separator=", "><endif>)
{
    flag ret = TRUE;
    <arrsLocalVariables; separator="\n">

    /*ret = bCheckConstraints ? <sName>_IsConstraintValid(pVal, pErrCode) : TRUE ;*/
	if (ret) {
	    <sContent>
    }

	return ret;
}
>>

TasPrimitiveDefinition_decode(sFuncName, sTypeDefName, arrsExtraParams) ::= <<
flag <sFuncName>(<sTypeDefName>* pVal1, BitStream* pBitStrm, int* pErrCode<if(arrsExtraParams)>, <arrsExtraParams; separator=", "><endif>);
>>

TasPrimitive_decode(sFuncName, sTypeDefName, arrsLocalVariables, sContent, arrsExtraParams) ::= <<
flag <sFuncName>(<sTypeDefName>* pVal1, BitStream* pBitStrm, int* pErrCode<if(arrsExtraParams)>, <arrsExtraParams; separator=", "><endif>)
{
    flag ret = TRUE;
    <arrsLocalVariables; separator="\n">
    <sContent>
    return ret;
}
>>


PrintType_encode(sMainBody, bAligmentApplied, sAligmentValue, bHasDependencies, sDependencyUpdates) ::= <<
<if(bAligmentApplied)>
Acn_AlignTo<sAligmentValue>(pBitStrm);

<endif>
<if(bHasDependencies)>
<sDependencyUpdates>

<endif>
<sMainBody>
>>


PrintType_decode(sMainBody, bAligmentApplied, sAligmentValue, bHasDependencies, sDependencyUpdates) ::= <<
<if(bAligmentApplied)>
Acn_AlignTo<sAligmentValue>(pBitStrm);

<endif>
<sMainBody>
>>


PrintTypeNoUpdate_encode(sMainBody, bAligmentApplied, sAligmentValue) ::= <<
<PrintType_encode(sMainBody=sMainBody, bAligmentApplied=bAligmentApplied, sAligmentValue=sAligmentValue)>
>>
PrintTypeNoUpdate_decode(sMainBody, bAligmentApplied, sAligmentValue) ::= <<
<PrintType_decode(sMainBody=sMainBody, bAligmentApplied=bAligmentApplied, sAligmentValue=sAligmentValue)>
>>

loopFixedItem (i, fixedSize, sInternalItem)::= /*nogen*/<<    
while (ret && (<i>\< <fixedSize>))  {
    <sInternalItem>
    <i> = <i> + 1;
}
>>




PositiveInteger_ConstSize_encode(p, nFixedSize, soMF) ::= "Acn_Enc_Int_PositiveInteger_ConstSize(pBitStrm, <if(soMF)><soMF>_encode(<p>)<else><p><endif>, <nFixedSize>);"
PositiveInteger_ConstSize_decode(p, nFixedSize, soMF) ::= <<
ret = Acn_Dec_Int_PositiveInteger_ConstSize(pBitStrm, <p>, <nFixedSize>);
<MF(soMF)>
<A()>
>>

PositiveInteger_ConstSize_8_encode(p, soMF) ::= "Acn_Enc_Int_PositiveInteger_ConstSize_8(pBitStrm, <if(soMF)><soMF>_encode(<p>)<else><p><endif>);"
PositiveInteger_ConstSize_8_decode(p, soMF) ::= <<
ret = Acn_Dec_Int_PositiveInteger_ConstSize_8(pBitStrm, <p>);
<MF(soMF)>
<A()>
>>

PositiveInteger_ConstSize_big_endian_16_encode(p, soMF) ::= "Acn_Enc_Int_PositiveInteger_ConstSize_big_endian_16(pBitStrm, <if(soMF)><soMF>_encode(<p>)<else><p><endif>);"
PositiveInteger_ConstSize_big_endian_16_decode(p, soMF) ::= <<
ret = Acn_Dec_Int_PositiveInteger_ConstSize_big_endian_16(pBitStrm, <p>);
<MF(soMF)>
<A()>
>>

PositiveInteger_ConstSize_big_endian_32_encode(p, soMF) ::= "Acn_Enc_Int_PositiveInteger_ConstSize_big_endian_32(pBitStrm, <if(soMF)><soMF>_encode(<p>)<else><p><endif>);"
PositiveInteger_ConstSize_big_endian_32_decode(p, soMF) ::= <<
ret = Acn_Dec_Int_PositiveInteger_ConstSize_big_endian_32(pBitStrm, <p>);
<MF(soMF)>
<A()>
>>

PositiveInteger_ConstSize_big_endian_64_encode(p, soMF) ::= "Acn_Enc_Int_PositiveInteger_ConstSize_big_endian_64(pBitStrm, <if(soMF)><soMF>_encode(<p>)<else><p><endif>);"
PositiveInteger_ConstSize_big_endian_64_decode(p, soMF) ::= <<
ret = Acn_Dec_Int_PositiveInteger_ConstSize_big_endian_64(pBitStrm, <p>);
<MF(soMF)>
<A()>
>>

PositiveInteger_ConstSize_little_endian_16_encode(p, soMF) ::= "Acn_Enc_Int_PositiveInteger_ConstSize_little_endian_16(pBitStrm, <if(soMF)><soMF>_encode(<p>)<else><p><endif>);"
PositiveInteger_ConstSize_little_endian_16_decode(p, soMF) ::= <<
ret = Acn_Dec_Int_PositiveInteger_ConstSize_little_endian_16(pBitStrm, <p>);
<MF(soMF)>
<A()>
>>

PositiveInteger_ConstSize_little_endian_32_encode(p, soMF) ::= "Acn_Enc_Int_PositiveInteger_ConstSize_little_endian_32(pBitStrm, <if(soMF)><soMF>_encode(<p>)<else><p><endif>);"
PositiveInteger_ConstSize_little_endian_32_decode(p, soMF) ::= <<
ret = Acn_Dec_Int_PositiveInteger_ConstSize_little_endian_32(pBitStrm, <p>);
<MF(soMF)>
<A()>
>>

PositiveInteger_ConstSize_little_endian_64_encode(p, soMF) ::= "Acn_Enc_Int_PositiveInteger_ConstSize_little_endian_64(pBitStrm, <if(soMF)><soMF>_encode(<p>)<else><p><endif>);"
PositiveInteger_ConstSize_little_endian_64_decode(p, soMF) ::= <<
ret = Acn_Dec_Int_PositiveInteger_ConstSize_little_endian_64(pBitStrm, <p>);
<MF(soMF)>
<A()>
>>

PositiveInteger_VarSize_LengthEmbedded_encode(p, soMF) ::= "Acn_Enc_Int_PositiveInteger_VarSize_LengthEmbedded(pBitStrm, <if(soMF)><soMF>_encode(<p>)<else><p><endif>);"
PositiveInteger_VarSize_LengthEmbedded_decode(p, soMF) ::= <<
ret = Acn_Dec_Int_PositiveInteger_VarSize_LengthEmbedded(pBitStrm, <p>);
<MF(soMF)>
<A()>
>>


TwosComplement_ConstSize_encode(p, nFixedSize, soMF) ::= "Acn_Enc_Int_TwosComplement_ConstSize(pBitStrm, <if(soMF)><soMF>_encode(<p>)<else><p><endif>, <nFixedSize>);"
TwosComplement_ConstSize_decode(p, nFixedSize, soMF) ::= <<
ret = Acn_Dec_Int_TwosComplement_ConstSize(pBitStrm, <p>, <nFixedSize>);
<MF(soMF)>
<A()>
>>

TwosComplement_ConstSize_8_encode(p, soMF) ::= "Acn_Enc_Int_TwosComplement_ConstSize_8(pBitStrm, <if(soMF)><soMF>_encode(<p>)<else><p><endif>);"
TwosComplement_ConstSize_8_decode(p, soMF) ::= <<
ret = Acn_Dec_Int_TwosComplement_ConstSize_8(pBitStrm, <p>);
<MF(soMF)>
<A()>
>>

TwosComplement_ConstSize_big_endian_16_encode(p, soMF) ::= "Acn_Enc_Int_TwosComplement_ConstSize_big_endian_16(pBitStrm, <if(soMF)><soMF>_encode(<p>)<else><p><endif>);"
TwosComplement_ConstSize_big_endian_16_decode(p, soMF) ::= <<
ret = Acn_Dec_Int_TwosComplement_ConstSize_big_endian_16(pBitStrm, <p>);
<A()>
>>

TwosComplement_ConstSize_big_endian_32_encode(p, soMF) ::= "Acn_Enc_Int_TwosComplement_ConstSize_big_endian_32(pBitStrm, <if(soMF)><soMF>_encode(<p>)<else><p><endif>);"
TwosComplement_ConstSize_big_endian_32_decode(p, soMF) ::= <<
ret = Acn_Dec_Int_TwosComplement_ConstSize_big_endian_32(pBitStrm, <p>);
<MF(soMF)>
<A()>
>>

TwosComplement_ConstSize_big_endian_64_encode(p, soMF) ::= "Acn_Enc_Int_TwosComplement_ConstSize_big_endian_64(pBitStrm, <if(soMF)><soMF>_encode(<p>)<else><p><endif>);"
TwosComplement_ConstSize_big_endian_64_decode(p, soMF) ::= <<
ret = Acn_Dec_Int_TwosComplement_ConstSize_big_endian_64(pBitStrm, <p>);
<MF(soMF)>
<A()>
>>

TwosComplement_ConstSize_little_endian_16_encode(p, soMF) ::= "Acn_Enc_Int_TwosComplement_ConstSize_little_endian_16(pBitStrm, <if(soMF)><soMF>_encode(<p>)<else><p><endif>);"
TwosComplement_ConstSize_little_endian_16_decode(p, soMF) ::= <<
ret = Acn_Dec_Int_TwosComplement_ConstSize_little_endian_16(pBitStrm, <p>);
<MF(soMF)>
<A()>
>>

TwosComplement_ConstSize_little_endian_32_encode(p, soMF) ::= "Acn_Enc_Int_TwosComplement_ConstSize_little_endian_32(pBitStrm, <if(soMF)><soMF>_encode(<p>)<else><p><endif>);"
TwosComplement_ConstSize_little_endian_32_decode(p, soMF) ::= <<
ret = Acn_Dec_Int_TwosComplement_ConstSize_little_endian_32(pBitStrm, <p>);
<MF(soMF)>
<A()>
>>

TwosComplement_ConstSize_little_endian_64_encode(p, soMF) ::= "Acn_Enc_Int_TwosComplement_ConstSize_little_endian_64(pBitStrm, <if(soMF)><soMF>_encode(<p>)<else><p><endif>);"
TwosComplement_ConstSize_little_endian_64_decode(p, soMF) ::= <<
ret = Acn_Dec_Int_TwosComplement_ConstSize_little_endian_64(pBitStrm, <p>);
<MF(soMF)>
<A()>
>>

TwosComplement_VarSize_LengthEmbedded_encode(p, soMF) ::= "Acn_Enc_Int_TwosComplement_VarSize_LengthEmbedded(pBitStrm, <if(soMF)><soMF>_encode(<p>)<else><p><endif>);"
TwosComplement_VarSize_LengthEmbedded_decode(p, soMF) ::= <<
ret = Acn_Dec_Int_TwosComplement_VarSize_LengthEmbedded(pBitStrm, <p>);
<MF(soMF)>
<A()>
>>


BCD_ConstSize_encode(p, nNibbles, soMF) ::= "Acn_Enc_Int_BCD_ConstSize(pBitStrm, <if(soMF)><soMF>_encode(<p>)<else><p><endif>, <nNibbles>);"
BCD_ConstSize_decode(p, nNibbles, soMF) ::= <<
ret = Acn_Dec_Int_BCD_ConstSize(pBitStrm, <p>, <nNibbles>);
<MF(soMF)>
<A()>
>>

BCD_VarSize_LengthEmbedded_encode(p, soMF) ::= "Acn_Enc_Int_BCD_VarSize_LengthEmbedded(pBitStrm, <if(soMF)><soMF>_encode(<p>)<else><p><endif>);"
BCD_VarSize_LengthEmbedded_decode(p, soMF) ::= <<
ret = Acn_Dec_Int_BCD_VarSize_LengthEmbedded(pBitStrm, <p>);
<MF(soMF)>
<A()>
>>

BCD_VarSize_NullTerminated_encode(p, soMF) ::= "Acn_Enc_Int_BCD_VarSize_NullTerminated(pBitStrm, <if(soMF)><soMF>_encode(<p>)<else><p><endif>);"
BCD_VarSize_NullTerminated_decode(p, soMF) ::= <<
ret = Acn_Dec_Int_BCD_VarSize_NullTerminated(pBitStrm, <p>);
<MF(soMF)>
<A()>
>>

ASCII_ConstSize_encode(p, nSizeInBytes, soMF) ::= "Acn_Enc_SInt_ASCII_ConstSize(pBitStrm, <if(soMF)><soMF>_encode(<p>)<else><p><endif>, <nSizeInBytes>);"
ASCII_ConstSize_decode(p, nSizeInBytes, soMF) ::= <<
ret = Acn_Dec_SInt_ASCII_ConstSize(pBitStrm, <p>, <nSizeInBytes>);
<MF(soMF)>
<A()>
>>

ASCII_VarSize_LengthEmbedded_encode(p, soMF) ::= "Acn_Enc_SInt_ASCII_VarSize_LengthEmbedded(pBitStrm, <if(soMF)><soMF>_encode(<p>)<else><p><endif>);"
ASCII_VarSize_LengthEmbedded_decode(p, soMF) ::= <<
ret = Acn_Dec_SInt_ASCII_VarSize_LengthEmbedded(pBitStrm, <p>);
<MF(soMF)>
<A()>
>>

ASCII_VarSize_NullTerminated_encode(p, soMF) ::= "Acn_Enc_SInt_ASCII_VarSize_NullTerminated(pBitStrm, <if(soMF)><soMF>_encode(<p>)<else><p><endif>);"
ASCII_VarSize_NullTerminated_decode(p, soMF) ::= <<
ret = Acn_Dec_SInt_ASCII_VarSize_NullTerminated(pBitStrm, <p>);
<MF(soMF)>
<A()>
>>

ASCII_UINT_ConstSize_encode(p, nSizeInBytes, soMF) ::= "Acn_Enc_UInt_ASCII_ConstSize(pBitStrm, <if(soMF)><soMF>_encode(<p>)<else><p><endif>, <nSizeInBytes>);"
ASCII_UINT_ConstSize_decode(p, nSizeInBytes, soMF) ::= <<
ret = Acn_Dec_UInt_ASCII_ConstSize(pBitStrm, <p>, <nSizeInBytes>);
<MF(soMF)>
<A()>
>>

ASCII_UINT_VarSize_LengthEmbedded_encode(p, soMF) ::= "Acn_Enc_UInt_ASCII_VarSize_LengthEmbedded(pBitStrm, <if(soMF)><soMF>_encode(<p>)<else><p><endif>);"
ASCII_UINT_VarSize_LengthEmbedded_decode(p, soMF) ::= <<
ret = Acn_Dec_UInt_ASCII_VarSize_LengthEmbedded(pBitStrm, <p>);
<MF(soMF)>
<A()>
>>

ASCII_UINT_VarSize_NullTerminated_encode(p, soMF) ::= "Acn_Enc_UInt_ASCII_VarSize_NullTerminated(pBitStrm, <if(soMF)><soMF>_encode(<p>)<else><p><endif>);"
ASCII_UINT_VarSize_NullTerminated_decode(p, soMF) ::= <<
ret = Acn_Dec_UInt_ASCII_VarSize_NullTerminated(pBitStrm, <p>);
<MF(soMF)>
<A()>
>>



Real_32_big_endian_encode(p) ::= "Acn_Enc_Real_IEEE754_32_big_endian(pBitStrm, <p>);"
Real_32_big_endian_decode(p) ::= <<
ret = Acn_Dec_Real_IEEE754_32_big_endian(pBitStrm, <p>);
<A()>
>>

Real_64_big_endian_encode(p) ::= "Acn_Enc_Real_IEEE754_64_big_endian(pBitStrm, <p>);"
Real_64_big_endian_decode(p) ::= <<
ret = Acn_Dec_Real_IEEE754_64_big_endian(pBitStrm, <p>);
<A()>
>>

Real_32_little_endian_encode(p) ::= "Acn_Enc_Real_IEEE754_32_little_endian(pBitStrm, <p>);"
Real_32_little_endian_decode(p) ::= <<
Acn_Dec_Real_IEEE754_32_little_endian(pBitStrm, <p>);
<A()>
>>

Real_64_little_endian_encode(p) ::= "Acn_Enc_Real_IEEE754_64_little_endian(pBitStrm, <p>);"
Real_64_little_endian_decode(p) ::= <<
ret = Acn_Dec_Real_IEEE754_64_little_endian(pBitStrm, <p>);
<A()>
>>



Boolean_encode(p, ptr, bEncValIsTrue, nSize, arruTrueValueAsByteArray, arruFalseValueAsByteArray) ::= <<
{
	static byte true_data[] = {<arruTrueValueAsByteArray:{b|0x<b;format="X2">}; separator=",">};
	static byte false_data[] = {<arruFalseValueAsByteArray:{b|0x<b;format="X2">}; separator=",">};
    byte* tmp = <p> ? true_data : false_data; 
    BitStream_AppendBits(pBitStrm, tmp, <nSize>);
}
>>


Boolean_decode(p, ptr, bEncValIsTrue, nSize, arruTrueValueAsByteArray, arruFalseValueAsByteArray) ::= <<
{
	<if(bEncValIsTrue)>
	static byte tmp[] = {<arruTrueValueAsByteArray:{b|0x<b;format="X2">}; separator=",">};
	<else>
	static byte tmp[] = {<arruFalseValueAsByteArray:{b|0x<b;format="X2">}; separator=",">};
	<endif>
	ret = BitStream_ReadBitPattern(pBitStrm, tmp, <nSize>, <ptr>);
    <A()>
	<if(!bEncValIsTrue)><p> = !<p>;<endif>
}
>>





Null_encode(arruNullValueAsByteArray, nSize) ::= <<
<if(arruNullValueAsByteArray)>
{
	static byte tmp[] = {<arruNullValueAsByteArray:{b|0x<b;format="X2">}; separator=",">};
	BitStream_AppendBits(pBitStrm, tmp, <nSize>);
}
<endif>
>>

Null_decode(arruNullValueAsByteArray, nSize) ::= <<
<if(arruNullValueAsByteArray)>
{
	static byte tmp[] = {<arruNullValueAsByteArray:{b|0x<b;format="X2">}; separator=",">};
    flag dummy;
	ret = BitStream_ReadBitPattern(pBitStrm, tmp, <nSize>, &dummy);
    <A()>
}

<endif>
>>

Null_empty_pattern() ::= "/*null, nothing to do */"





Declare_EnumValueUInt() ::= "asn1SccUint intVal = 0;"
Declare_EnumValueSInt() ::= "asn1SccSint intVal = -1;"


Enumerated_item_encode(p, sName, nItemIdxOrVal) ::= <<
case <sName>:
    intVal = <nItemIdxOrVal>;
    break;
>>

Enumerated_item_decode(p, sName, nItemIdxOrVal) ::= <<
case <nItemIdxOrVal>:
    <p> = <sName>;
    break;
>>

EnumeratedEncIdx_encode(p, sTasName, arrsItem, sActualCodecFunc) ::= <<
switch(<p>) { 
    <arrsItem; separator="\n">
    default:
        ret = FALSE;                            //COVERAGE_IGNORE
        *pErrCode = ERR_INVALID_ENUM_VALUE;      //COVERAGE_IGNORE
}
<sActualCodecFunc>
>>

EnumeratedEncIdx_decode(p, sTasName, arrsItem, sActualCodecFunc) ::= <<
<sActualCodecFunc>
if (ret) {
    switch (intVal) {
        <arrsItem; separator="\n">
    default:
        ret = FALSE;                            //COVERAGE_IGNORE
        *pErrCode = ERR_INVALID_ENUM_VALUE;      //COVERAGE_IGNORE
    };
}
>>


EnumeratedEncValues_encode(p, sTasName, arrsItem, sActualCodecFunc) ::= <<
<EnumeratedEncIdx_encode(p=p, sTasName=sTasName, arrsItem=arrsItem, sActualCodecFunc=sActualCodecFunc)>
>>

EnumeratedEncValues_decode(p, sTasName, arrsItem, sActualCodecFunc) ::= <<
<sActualCodecFunc>
if (ret) {
    switch (intVal) {
        <arrsItem; separator="\n">
    default:
        ret = FALSE;                            //COVERAGE_IGNORE
        *pErrCode = ERR_INVALID_ENUM_VALUE;      //COVERAGE_IGNORE
    }
}
>>



/* Strings */
Acn_String_Ascii_FixSize_encode(p, nAsn1Max) ::= "Acn_Enc_String_Ascii_FixSize(pBitStrm, <nAsn1Max>, <p>);"
Acn_String_Ascii_FixSize_decode(p, nAsn1Max) ::= <<
ret = Acn_Dec_String_Ascii_FixSize(pBitStrm, <nAsn1Max>, <p>);
<A()>
>>

Acn_String_Ascii_Null_Teminated_encode(p, nAsn1Max, sNull) ::= "Acn_Enc_String_Ascii_Null_Teminated(pBitStrm, <nAsn1Max>, <sNull>, <p>);"
Acn_String_Ascii_Null_Teminated_decode(p, nAsn1Max, sNull) ::= <<
ret = Acn_Dec_String_Ascii_Null_Teminated(pBitStrm, <nAsn1Max>, <sNull>, <p>);
<A()>
>>

Acn_String_Ascii_External_Field_Determinant_encode(p, nAsn1Max, sExtFld) ::= "Acn_Enc_String_Ascii_External_Field_Determinant(pBitStrm, <nAsn1Max>, <p>);"
Acn_String_Ascii_External_Field_Determinant_decode(p, nAsn1Max, sExtFld) ::= <<
ret = Acn_Dec_String_Ascii_External_Field_Determinant(pBitStrm, <nAsn1Max>, <sExtFld>, <p>);
<A()>
>>

Acn_String_Ascii_Internal_Field_Determinant_encode(p, nAsn1Max, nAsn1Min) ::= "Acn_Enc_String_Ascii_Internal_Field_Determinant(pBitStrm, <nAsn1Max>, <nAsn1Min>, <p>);"
Acn_String_Ascii_Internal_Field_Determinant_decode(p, nAsn1Max, nAsn1Min) ::= <<
ret = Acn_Dec_String_Ascii_Internal_Field_Determinant(pBitStrm, <nAsn1Max>, <nAsn1Min>, <p>);
<A()>
>>

PrintAlphabet2(arrnCharSet) ::= <<
static byte allowedCharSet[] = {<arrnCharSet:{ch|0x<ch;format="X2">}; wrap, anchor, separator=",">}; 
>>

Acn_String_CharIndex_FixSize_encode(p, nAsn1Max, arrnAlphabetAsciiCodes, nCharSetSize) ::= <<
<PrintAlphabet2(arrnAlphabetAsciiCodes)>
Acn_Enc_String_CharIndex_FixSize(pBitStrm, <nAsn1Max>, allowedCharSet, <nCharSetSize>, <p>);
>>

Acn_String_CharIndex_FixSize_decode(p, nAsn1Max, arrnAlphabetAsciiCodes, nCharSetSize) ::= <<
<PrintAlphabet2(arrnAlphabetAsciiCodes)>
ret = Acn_Dec_String_CharIndex_FixSize(pBitStrm, <nAsn1Max>, allowedCharSet, <nCharSetSize>, <p>);
<A()>
>>

Acn_String_CharIndex_External_Field_Determinant_encode(p, nAsn1Max, arrnAlphabetAsciiCodes, nCharSetSize, sExtFld) ::= <<
<PrintAlphabet2(arrnAlphabetAsciiCodes)>
Acn_Enc_String_CharIndex_External_Field_Determinant(pBitStrm, <nAsn1Max>, allowedCharSet, <nCharSetSize>, <p>);
>>

Acn_String_CharIndex_External_Field_Determinant_decode(p, nAsn1Max, arrnAlphabetAsciiCodes, nCharSetSize, sExtFld) ::= <<
<PrintAlphabet2(arrnAlphabetAsciiCodes)>
ret = Acn_Dec_String_CharIndex_External_Field_Determinant(pBitStrm, <nAsn1Max>, allowedCharSet, <nCharSetSize>, <sExtFld>, <p>);
<A()>
>>

Acn_String_CharIndex_Internal_Field_Determinant_encode(p, nAsn1Max, arrnAlphabetAsciiCodes, nCharSetSize, nAsn1Min) ::= <<
<PrintAlphabet2(arrnAlphabetAsciiCodes)>
Acn_Enc_String_CharIndex_Internal_Field_Determinant(pBitStrm, <nAsn1Max>, allowedCharSet, <nCharSetSize>, <nAsn1Min>, <p>);
>>

Acn_String_CharIndex_Internal_Field_Determinant_decode(p, nAsn1Max, arrnAlphabetAsciiCodes, nCharSetSize, nAsn1Min) ::= <<
<PrintAlphabet2(arrnAlphabetAsciiCodes)>
ret = Acn_Dec_String_CharIndex_Internal_Field_Determinant(pBitStrm, <nAsn1Max>, allowedCharSet, <nCharSetSize>, <nAsn1Min>, <p>);
<A()>
>>



string_InternalItem_encode(p, i, nCharSetMaxIndex) ::=<<
charIndex = <p>[<i>];
BitStream_EncodeConstraintWholeNumber(pBitStrm, charIndex, 0, <nCharSetMaxIndex>);
>>


string_InternalItem_decode(p, i, nCharSetMaxIndex) ::=<<
ret = BitStream_DecodeConstraintWholeNumber(pBitStrm, &charIndex, 0, <nCharSetMaxIndex>);
*pErrCode = ret ? 0 : ERR_INSUFFICIENT_DATA;
<p>[<i>] = ret ? (char)charIndex : '\0';
>>


str_FixedSize_encode(p, i, sInternalItem, nFixedSize) ::= <<
{
    asn1SccSint charIndex;
    <loopFixedItem(i=i, sInternalItem=sInternalItem, fixedSize=nFixedSize)>
}
>>

str_FixedSize_decode(p, i, sInternalItem, nFixedSize) ::= <<
{
    asn1SccSint charIndex;
    *pErrCode = 0;
    memset(<p>, 0x0, <nFixedSize>+1);
    <loopFixedItem(i=i, sInternalItem=sInternalItem, fixedSize=nFixedSize)>
}
>>

str_VarSize_encode(p, i, sInternalItem, nSizeMin, nSizeMax) ::= <<
nCount = strlen(<p>);
ret = (nCount >= <nSizeMin>) && (nCount \<= <nSizeMax>);
if (ret) {
    asn1SccSint charIndex;
    BitStream_EncodeConstraintWholeNumber(pBitStrm, nCount, <nSizeMin>, <nSizeMax>);
    <loopFixedItem(i=i, sInternalItem=sInternalItem, fixedSize="nCount")>
};
>>

str_VarSize_decode(p, i, sInternalItem, nSizeMin, nSizeMax) ::= <<
{
    asn1SccSint charIndex;
    memset(<p>, 0x0, <nSizeMax>+1);
    ret = BitStream_DecodeConstraintWholeNumber(pBitStrm, &nCount, <nSizeMin>, <nSizeMax>);
    *pErrCode = ret ? 0 : ERR_INSUFFICIENT_DATA;
    <loopFixedItem(i=i, sInternalItem=sInternalItem, fixedSize="nCount")>
}
>>


str_VarSize_null_terminated_encode(p, nSizeMax, sNullCharacter) ::= <<
Acn_Enc_String_NullTerminated(pBitStrm, <p>, <nSizeMax>, '<sNullCharacter>');
>>

str_VarSize_null_terminated_decode(p, nSizeMax, sNullCharacter) ::= <<
ret = Acn_Dec_String_NullTerminated(pBitStrm, <p>, <nSizeMax>, '<sNullCharacter>');
<A()>
>>




str_external_field_encode(p, i, sInternalItem, nSizeMin, nSizeMax,  sExtFld) ::= <<
nCount = strlen(<p>);
ret = (nCount >= <nSizeMin>) && (nCount \<= <nSizeMax>);
if (ret) {
    asn1SccSint charIndex;
    <loopFixedItem(i=i, sInternalItem=sInternalItem, fixedSize="nCount")>
}
>>

str_external_field_decode(p, i, sInternalItem, nSizeMin, nSizeMax,  sExtFld) ::= <<
{
    asn1SccSint charIndex;
    memset(<p>, 0x0, <nSizeMax>+1);
    ret = (<sExtFld> >= <nSizeMin>) && (<sExtFld> \<= <nSizeMax>);
    <loopFixedItem(i=i, sInternalItem=sInternalItem, fixedSize=["(int)",sExtFld])>
}
>>


oct_sqf_external_field_encode(p, sAcc, i, sInternalItem, noSizeMin, nSizeMax, sExtFld) ::= <<
<loopFixedItem(i=i, sInternalItem=sInternalItem, fixedSize=[p, sAcc, "nCount"])>
>>


oct_sqf_external_field_decode(p, sAcc, i, sInternalItem, noSizeMin, nSizeMax, sExtFld) ::= <<
ret = (<if(noSizeMin)>(<noSizeMin>\<=<sExtFld>) && <endif>(<sExtFld>\<=<nSizeMax>));
if (ret) {
    <p><sAcc>nCount = (int)<sExtFld>;
    <loopFixedItem(i=i, sInternalItem=sInternalItem, fixedSize=[p,sAcc, "nCount"])>
}
>>


bit_string_external_field_encode(p, sAcc, noSizeMin, nSizeMax, sExtFld) ::= <<
BitStream_AppendBits(pBitStrm, <p><sAcc>arr, <p><sAcc>nCount);
>>

bit_string_external_field_decode(p, sAcc, noSizeMin, nSizeMax, sExtFld) ::= <<
ret = (<if(noSizeMin)>(<noSizeMin>\<=<sExtFld>) && <endif>(<sExtFld>\<=<nSizeMax>));
if (ret) {
    <p><sAcc>nCount = (int)<sExtFld>;
    ret = BitStream_ReadBits(pBitStrm, <p><sAcc>arr, <p><sAcc>nCount);
    *pErrCode = ret ? 0 : ERR_INSUFFICIENT_DATA;
}
>>

RefTypeParam_tmpVar(sName, sTypeDecl) ::= "<sTypeDecl> <sName>;"


ReferenceType1_encode(p, sName, bAcnEncodeFuncRequiresResult, arrsArgs, arrsLocalPrms) ::= <<
<arrsLocalPrms, arrsArgs: {lp,arg|<if(arg)><lp> = <arg>;// 3031<endif>}; separator="\n">
ret = <sName>_ACN_Encode(<p>, pBitStrm, pErrCode, FALSE<if(arrsArgs)>, <arrsLocalPrms; separator=", "><endif>);
>>

ReferenceType1_decode(p, sName, bAcnEncodeFuncRequiresResult, arrsArgs, arrsLocalPrms) ::= <<
<arrsLocalPrms, arrsArgs: {lp,arg|<if(arg)><lp> = <arg>; // 3030<endif>}; separator="\n">
ret = <sName>_ACN_Decode(<p>, pBitStrm, pErrCode<if(arrsArgs)>, <arrsLocalPrms; separator=", "><endif>);
>>



/* SEQUENCE*/


sequence_presense_optChild_encode(p, sAcc, sChName, sErrCode) ::= "BitStream_AppendBit(pBitStrm,<p><sAcc>exist.<sChName>);"
sequence_presense_optChild_decode(p, sAcc, sChName, sErrCode) ::= <<
ret = BitStream_ReadBit(pBitStrm, &presenceBit);
<p><sAcc>exist.<sChName> = presenceBit == 0 ? 0 : 1;
*pErrCode = ret ? 0 : <sErrCode>;
>>

sequence_presense_optChild_pres_bool_encode(p, sAcc, sChName, sExtFldName) ::= ""
sequence_presense_optChild_pres_bool_decode(p, sAcc, sChName, sExtFldName) ::= <<
<p><sAcc>exist.<sChName> = <sExtFldName> ? 1 : 0;
>>

sequence_presense_optChild_pres_int_encode(p, sAcc, sChName, sExtFldName, nIntVal) ::= ""
sequence_presense_optChild_pres_int_decode(p, sAcc, sChName, sExtFldName, nIntVal) ::= <<
<p><sAcc>exist.<sChName> = (<sExtFldName> == <nIntVal>) ? 1 : 0;
>>

sequence_presense_optChild_pres_str_encode(p, sAcc, sChName, sExtFldName, sVal) ::= ""
sequence_presense_optChild_pres_str_decode(p, sAcc, sChName, sExtFldName, sVal) ::= <<
<p><sAcc>exist.<sChName> = (strcmp(<sExtFldName>, "<sVal>") == 0) ? 1 : 0;
>>


sequence_mandatory_child_encode(sChName, sChildContent) ::= <<
/*Encode <sChName> */
<sChildContent>
>>
sequence_mandatory_child_decode(sChName, sChildContent) ::= <<
/*Decode <sChName> */
<sChildContent>
>>

sequence_optional_child_encode(p, sAcc, sChName, sChildContent) ::= <<
/*Encode <sChName> */
if (<p><sAcc>exist.<sChName>) {
	<sChildContent>
}
>>

sequence_optional_child_decode(p, sAcc, sChName, sChildContent) ::= <<
/*Decode <sChName> */
if (<p><sAcc>exist.<sChName>) {
	<sChildContent>
}
>>


sequence_optional_always_present_child_encode(p, sAcc, sChName, sChildContent) ::= <<
/*Encode <sChName> */
<sChildContent>
>>

sequence_optional_always_present_child_decode(p, sAcc, sChName, sChildContent) ::= <<
/*Decode <sChName> */
<p><sAcc>exist.<sChName> = 1;
if (<p>exist.<sChName>) {
	<sChildContent>
}
>>


sequence_default_child_encode(p, sAcc, sChName, sChildContent, sInitWithDefaultValue) ::= <<
<sequence_optional_child_encode(p=p, sAcc=sAcc, sChName=sChName, sChildContent=sChildContent)>
>>


sequence_default_child_decode(p, sAcc, sChName, sChildContent, sInitWithDefaultValue) ::= <<
/*Decode <sChName> */
if (<p><sAcc>exist.<sChName>) {
	<sChildContent>
} else {
    <sInitWithDefaultValue>
}
>>



/* SEQUENCE END */


/* Choice like uper*/

ChoiceChild_encode(p, sAcc, sChildID, nChildIndex, nLastItemIndex, sChildContent) ::= <<
case <sChildID>:
	BitStream_EncodeConstraintWholeNumber(pBitStrm, <nChildIndex>, 0, <nLastItemIndex>);
	<sChildContent>
	break;
>>
ChoiceChild_decode(p, sAcc, sChildID, nChildIndex, nLastItemIndex, sChildContent) ::= <<
case <nChildIndex>:
	<p><sAcc>kind = <sChildID>;
	<sChildContent>
	break;
>>

Choice_encode(p, sAcc, arrsChildren, nLastItemIndex, sErrCode) ::= <<
switch(<p><sAcc>kind) 
{
<arrsChildren: {ch|<ch>}; separator="\n">
default:
    *pErrCode = ERR_INVALID_CHOICE_ALTERNATIVE;         //COVERAGE_IGNORE
    ret = FALSE;                    //COVERAGE_IGNORE
}
>>

Choice_decode(p, sAcc, arrsChildren, nLastItemIndex, sErrCode) ::= <<
ret = BitStream_DecodeConstraintWholeNumber(pBitStrm, &nChoiceIndex, 0, <nLastItemIndex>);
*pErrCode = ret ? 0 : ERR_INSUFFICIENT_DATA;
if (ret) {
    switch(nChoiceIndex) 
    {
    <arrsChildren: {ch|<ch>}; separator="\n">
    default:
        *pErrCode = ERR_INVALID_CHOICE_ALTERNATIVE;     //COVERAGE_IGNORE
        ret = FALSE;                //COVERAGE_IGNORE
    }
}
>>

/* Choice with presense determinants */


ChoiceChild_preWhen_encode(p, sAcc, sChildID, sChildBody, arrsConditions, bFirst) ::= <<
case <sChildID>:
	<sChildBody>
	break;
>>


ChoiceChild_preWhen_bool_condition(sExtFld) ::= "<sExtFld>"
ChoiceChild_preWhen_int_condition(sExtFld, nVal) ::= "(<sExtFld> == <nVal>)"
ChoiceChild_preWhen_str_condition(sExtFld, sVal) ::= "(strcmp(<sExtFld>, \"<sVal>\") == 0)"

ChoiceChild_preWhen_decode(p, sAcc, sChildID, sChildBody, arrsConditions, bFirst) ::= <<
<if(!bFirst)>else <endif>if (<arrsConditions; separator=" && ">) {
    <p><sAcc>kind = <sChildID>;
    <sChildBody>
}
>>


Choice_preWhen_encode(p, sAcc, arrsChildren, sErrCode) ::= <<
switch(<p><sAcc>kind) 
{
<arrsChildren; separator="\n">
default:
    *pErrCode = ERR_INVALID_CHOICE_ALTERNATIVE;         //COVERAGE_IGNORE
    ret = FALSE;                    //COVERAGE_IGNORE
}
>>

Choice_preWhen_decode(p, sAcc, arrsChildren, sErrCode) ::= <<
*pErrCode = 0;
<arrsChildren; separator="\n">
else {
    *pErrCode = ERR_INVALID_CHOICE_ALTERNATIVE;         //COVERAGE_IGNORE
    ret = FALSE;                    //COVERAGE_IGNORE
}
>>


/* Choice with Enum determinant */



ChoiceChild_Enum_encode(p, sAcc, sEnmName, sChildID, sChildBody) ::= <<
case <sChildID>:    
	<sChildBody>
	break;
>>

ChoiceChild_Enum_decode(p, sAcc, sEnmName, sChildID, sChildBody) ::= <<
case <sEnmName>:
	<p><sAcc>kind = <sChildID>;
	<sChildBody>
	break;
>>


Choice_Enum_encode(p, sAcc, arrsChildren, sEnmExtFld, sErrCode) ::= <<
switch(<p><sAcc>kind) 
{
    <arrsChildren; separator="\n">
default:
    *pErrCode = ERR_INVALID_ENUM_VALUE;         //COVERAGE_IGNORE
    ret = FALSE;                    //COVERAGE_IGNORE
}
>>

Choice_Enum_decode(p, sAcc, arrsChildren, sEnmExtFld, sErrCode) ::= <<
switch(<sEnmExtFld>)
{
    <arrsChildren; separator="\n">
default:
    *pErrCode = ERR_INVALID_ENUM_VALUE;         //COVERAGE_IGNORE
    ret = FALSE;                    //COVERAGE_IGNORE
}
>>


/* Updates */

PrintAcn_update_param(sTasName, sStar, sParamType, sParamName, sStarParm, sContent, arrsTmpVars) ::= <<
flag <sTasName>_ACN_Encode_update_<sParamName>(const <sTasName><sStar> pVal, <sParamType><sStarParm> <sParamName>)
{
    flag ret = TRUE;

    <arrsTmpVars; separator="\n">
    <sContent>

    return ret;
}
>>

PrintAcn_update_param_body_choice_child(sChildPresentID, sChildUpdateStatement, bCheckSuccess) ::= <<
case <sChildPresentID>:
    <sChildUpdateStatement>
    break;
>>

PrintAcn_update_param_body_choice(arrsChildUpdateStatements) ::= <<
switch (pVal->kind) {
	<arrsChildUpdateStatements; separator="\n">
    default:
        ret = FALSE;                 //COVERAGE_IGNORE
}
>>

PrintAcn_update_param_body(sPart, sNestedPart, bCheckSuccess) ::= <<
<sPart>
<if(sNestedPart)>
<if(bCheckSuccess)>
if (ret) {
    <sNestedPart>
};
<else>
<sNestedPart>
<endif>
<endif>
>>



RefTypeArgument1(v, sTasName, sParamName, sRefTypePath) ::= <<
ret = <sTasName>_ACN_Encode_update_<sParamName>(<sRefTypePath>, <v>);
>>


SizeDependency(v, sCount) ::= "<v> = <sCount>;"


ChoiceDependencyEnum_Item(v, sChildCID, sEnumCName) ::= <<
case <sChildCID>:
	<v> = <sEnumCName>; 
    break;
>>

ChoiceDependencyEnum(sTasName, arrsChoiceEnumItems) ::= <<
switch (pVal->kind) {
    <arrsChoiceEnumItems; separator="\n">
    default:
        ret = FALSE;                            //COVERAGE_IGNORE
}
>>



PresenceDependency(v, sSeqPath, sAcc, sChildName) ::= <<
<v> = (<sSeqPath><sAcc>exist.<sChildName> == 1);
>>

ChoiceDependencyIntPres_child(v, sChildNamePrese, nChildRetVal) ::= <<
case <sChildNamePrese>:
	<v> = <nChildRetVal>; 
    break;
>>

ChoiceDependencyStrPres_child(v, sChildNamePrese, sChildRetVal) ::= <<
case <sChildNamePrese>:
	strcpy(<v>, <sChildRetVal>);
    break;
>>

ChoiceDependencyPres(sChPath, sAcc, arrsChoiceItems) ::= <<
switch (<sChPath><sAcc>kind) {
    <arrsChoiceItems; separator="\n">
    default:
        ret = FALSE;                            //COVERAGE_IGNORE
}
>>



MultiUpdateCheckWithFirstValue(sCurValue, sFirstValue) ::= <<
ret = (<sCurValue> == <sFirstValue>);
<A()>
>>

MultiUpdateCheckWithFirstValueInteger(sCurValue, sFirstValue) ::= <<
ret = (<sCurValue> == <sFirstValue>);
<A()>
>>

MultiParamUpdateCheckWithFirstValue(sCurValue, sFirstValue) ::= <<
ret = (<sCurValue> == <sFirstValue>);
<A()>
>>

CheckBeforeAssignToIntField_min_max(sTmpVar0, nMin, nMax) ::= <<
ret = (<sTmpVar0> >= <nMin> && <sTmpVar0>\<=<nMax>);
<A()>
>>

CheckBeforeAssignToIntField_max(sTmpVar0, nMax) ::= <<
ret = (<sTmpVar0>\<=<nMax>);
<A()>
>>

CheckBeforeAssignToIntField_min(sTmpVar0, nMin) ::= <<
ret = (<sTmpVar0> >= <nMin>)
<A()>
>>

UpdateAsn1Field(sAcnField, sTmpVar) ::= <<
<sAcnField> = <sTmpVar>; // 23945
>>


UpdateAsn1IntegerField(sAcnField, sTmpVar0, sAsn1FieldType) ::= <<
<sAcnField> = <sTmpVar0>; // 23946
>>


MultiUpdateCheckWithFirstValue2(sCurValue, sFirstValue) ::= <<
ret = (ret && <sCurValue> == <sFirstValue>);
<A()>
>>

MultiParamUpdateCheckWithFirstValue2(sCurValue, sFirstValue) ::= <<
ret = (ret && <sCurValue> = <sFirstValue>);
<A()>
>>


