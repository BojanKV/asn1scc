group c_init;


initTypeAssignment_def(sVarName, sStar, sFuncName, sTypeDefName) ::= <<
void <sFuncName>(<sTypeDefName><sStar> <sVarName>);
>>

initTypeAssignment(sVarName, sStar, sFuncName, sTypeDefName, sContent) ::= <<
void <sFuncName>(<sTypeDefName><sStar> <sVarName>)
{
	<sContent>
}
>>



initInteger(sVal, nValue) ::= "<sVal> = <nValue>;"
initReal(sVal, dValue) ::= "<sVal> = <dValue>;"
initBoolean(sVal, bValue) ::= "<sVal> = <if(bValue)>TRUE<else>FALSE<endif>;"
initIA5String(sPtr, sValue, arrsNullChars) ::= "strcpy(<sPtr>,\"<sValue>\");"
initEnumerated(sVal, sValue) ::= "<sVal> = <sValue>;"
initNull(sVal)    ::= "<sVal> =NULL;"


/* BIT AND OCTET STRINGS */
initFixSizeBitOrOctString_bytei(p, sAcc, sI, sByteHexVal) ::= "<p><sAcc>arr[<sI>] = 0x<sByteHexVal>;"
initFixSizeBitOrOctString(p, sAcc,arrsBytes) ::= <<
<arrsBytes; separator="\n">
>>
initFixVarSizeBitOrOctString(p, sAcc, nSize, arrsBytes) ::= <<
<p><sAcc>nCount = <nSize>;
<arrsBytes; separator="\n">
>>


/*SEQUENCE OF */

/*dummy in C*/
initSequence_pragma(p) ::= ""


initFixedSequenceOf(arrsInnerValues) ::= <<
<arrsInnerValues; separator="\n">        
>>


initVarSizeSequenceOf(p, sAcc, nSize, arrsInnerValues) ::= <<
<p><sAcc>nCount = <nSize>;
<arrsInnerValues; separator="\n">        
>>

/*SEQUENCE*/

initSequence_optionalChild(p, sAcc, sChName, sPresentFlag, sChildContent) ::=<<
<p><sAcc>exist.<sChName> = <sPresentFlag>;
<sChildContent>
>>

initSequence(arrsInnerValues) ::= <<
<arrsInnerValues; separator="\n">        
>>

initChoice(p1, sAccess, sChildContent, sChildKind) ::= <<
<p1><sAccess>kind = <sChildKind>;
<sChildContent>        
>>


