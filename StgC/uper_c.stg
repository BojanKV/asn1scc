group c_uper;


getStringSize(p) ::= "strlen(<p>)"

getSizeableSize(p, sAcc) ::= "<p><sAcc>nCount"

Print_AlphabetCheckFunc_str(p) ::= "<p>[i]"

call_base_type_func_encode(p, sFuncName) ::= "ret = <sFuncName>(<p>, pBitStrm, pErrCode, FALSE);"
call_base_type_func_decode(p, sFuncName) ::= "ret = <sFuncName>(<p>, pBitStrm, pErrCode);"


main(sFileNameWithoutExtension, arrsUnnamedVariables, arrsValueAssignments, arrsTypeAssignments, soMappingFunctionsModule) ::= <<
/*
Code automatically generated by asn1scc tool
*/
#include \<limits.h>
#include \<string.h>
#include \<math.h>
#include "<sFileNameWithoutExtension>.h"
<if(soMappingFunctionsModule)>
#include "<soMappingFunctionsModule>.h"

<endif>

<arrsUnnamedVariables: {uv|<uv>}; separator="\n">

<arrsValueAssignments: {uv|<uv>}; separator="\n">

<arrsTypeAssignments: {uv|<uv>}; separator="\n\n">

>>

gcc_main(sFileNameWithoutExtension, arrsValueAssignments) ::= <<
#include "<sFileNameWithoutExtension>.h"

<arrsValueAssignments: {uv|<uv>}; separator="\n">
>>

PrintUnnamedVariable(sTypeDecl, sName, sValue) ::= "const <sTypeDecl> <sName> = <sValue>;"

PrintValueAssignment(sTypeDecl, sName, sValue) ::= "const <sTypeDecl> <sName> = <sValue>;"





/*
*****************************************************************************************
 I N I T I A L I Z E      F U N C T I O N S
*****************************************************************************************
*/

PrintInitialize(sTasName, sStar, sContent, bIsString) ::= <<
#if !defined(_MSC_VER) || _MSC_VER >= 1800
void <sTasName>_Initialize(<sTasName><sStar> pVal)
{
<if(!bIsString)>
    *pVal = (<sTasName>) <sContent>;
<else>
    static <sTasName> ret = 
        <sContent>;
    strcpy(pVal, ret);
<endif>

}
#endif
>>




/*******************************************************/
/*   U P E R                                           */
/*******************************************************/

Declare_EnumIndex() ::= "asn1SccSint enumIndex;"
Declare_Length()    ::= "asn1SccSint nCount;"
Declare_ChoiceIndex() ::= "asn1SccSint nChoiceIndex;"
Declare_SequenceBitMask(sName, nSize) ::= "unsigned char <sName>[<nSize>];"


EmitTypeAssignment_def_err_code(sErrCode, nErrValue) ::= <<
#define <sErrCode>		<nErrValue>  /**/
>>


EmitTypeAssignment_primitive_def_encode(sVarName, sStar, sFuncName, sTypeDefName, arrsErrcodes, bEmptyEncodingSpace, nMaxBytesInPER, nMaxBitsInPER) ::= <<
<arrsErrcodes; separator="\n">
#define <sTypeDefName>_REQUIRED_BYTES_FOR_ENCODING       <nMaxBytesInPER> 
#define <sTypeDefName>_REQUIRED_BITS_FOR_ENCODING        <nMaxBitsInPER>

flag <sFuncName>(const <sTypeDefName><sStar> <sVarName>, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
>>

EmitTypeAssignment_primitive_encode(sVarName, sStar, sFuncName, soIValidFuncName, sTypeDefName, arrsLocalVariables, sContent, soSparkAnnotations, sInitilialExp) ::= <<
flag <sFuncName>(const <sTypeDefName><sStar> <sVarName>, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints)
{
    flag ret = TRUE;
	<arrsLocalVariables:{lv|<lv>}; separator="\n">
    <if(soIValidFuncName)>
	ret = bCheckConstraints ? <soIValidFuncName>(<sVarName>, pErrCode) : TRUE ;
	if (ret) {
	    <sContent>
    }

    <else>
    *pErrCode = 0;
    bCheckConstraints=bCheckConstraints;
    <sContent>

    <endif>
	
    return ret;
}
>>

EmitTypeAssignment_primitive_def_decode(sVarName, sStar, sFuncName, sTypeDefName, arrsErrcodes, bEmptyEncodingSpace, nMaxBytesInPER, nMaxBitsInPER) ::= <<
<arrsErrcodes; separator="\n">
flag <sFuncName>(<sTypeDefName><sStar> <sVarName>, BitStream* pBitStrm, int* pErrCode);
>>

EmitTypeAssignment_primitive_decode(sVarName, sStar, sFuncName, soIValidFuncName, sTypeDefName, arrsLocalVariables, sContent, soSparkAnnotations, sInitilialExp) ::= <<
flag <sFuncName>(<sTypeDefName><sStar> <sVarName>, BitStream* pBitStrm, int* pErrCode)
{
    flag ret = TRUE;
	<arrsLocalVariables:{lv|<lv>}; separator="\n">

	<sContent>

	return ret;
}
>>







PrintUper_encode(sName, sStar, arrsLocalVariables, sContent) ::= <<
flag <sName>_Encode(const <sName><sStar> pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints)
{
    flag ret = TRUE;
	<arrsLocalVariables:{lv|<lv>}; separator="\n">
    
	ret = bCheckConstraints ? <sName>_IsConstraintValid(pVal, pErrCode) : TRUE ;
	if (ret) {
	    <sContent>
    }

	return ret;
}
>>

PrintUper_decode(sName, sStar, arrsLocalVariables, sContent) ::= <<
flag <sName>_Decode(<sName><sStar> pVal, BitStream* pBitStrm, int* pErrCode)
{
    flag ret = TRUE;
	<arrsLocalVariables:{lv|<lv>}; separator="\n">

	<sContent>

	return ret;
}
>>



InternalItem_oct_str_encode(p, sAcc, i, sErrCode) ::=<<
BitStream_AppendByte0(pBitStrm, <p><sAcc>arr[<i>]);
>>

InternalItem_oct_str_decode(p, sAcc, i, sErrCode) ::=<<
ret = BitStream_ReadByte(pBitStrm, &(<p><sAcc>arr[<i>])); 
*pErrCode = ret ? 0 : <sErrCode>;
>>

PrintAlphabet2(arrnCharSet) ::= <<
static byte allowedCharSet[] = {<arrnCharSet:{ch|0x<ch;format="X2">}; wrap, anchor, separator=",">}; 
>>

InternalItem_string_with_alpha_encode(p, sTasName, i, nLastItemIndex, arrnAlphabetAsciiCodes, nAlphabetLength, nCharIndexSize) ::=<<
<PrintAlphabet2(arrnAlphabetAsciiCodes)>
int charIndex = GetCharIndex(<p>[<i>], allowedCharSet, <nAlphabetLength>);
BitStream_EncodeConstraintWholeNumber(pBitStrm, charIndex, 0, <nLastItemIndex>);
>>
InternalItem_string_with_alpha_decode(p, sTasName, i, nLastItemIndex, arrnAlphabetAsciiCodes, nAlphabetLength, nCharIndexSize) ::=<<
<PrintAlphabet2(arrnAlphabetAsciiCodes)>
asn1SccSint charIndex = 0;
ret = BitStream_DecodeConstraintWholeNumber(pBitStrm, &charIndex, 0, <nLastItemIndex>);
*pErrCode = ret ? 0 : ERR_INSUFFICIENT_DATA;
<p>[<i>] = ret ? allowedCharSet[charIndex] : '\0' ;
>>

InternalItem_string_no_alpha_encode(p, i) ::=<<
BitStream_EncodeConstraintWholeNumber(pBitStrm, <p>[<i>], 0, 127);
>>

InternalItem_string_no_alpha_decode(p, i) ::=<<
asn1SccSint charValue=0;
ret = BitStream_DecodeConstraintWholeNumber(pBitStrm, &charValue, 0, 127);
*pErrCode = ret ? 0 : ERR_INSUFFICIENT_DATA;
<p>[<i>] = (char)charValue;
>>


/* INTETEGER START*/


/*case: A:: = INTEGER (-5..20) */
IntFullyConstraint_encode(p, nMin, nMax, nBits, sErrCode) ::= "BitStream_EncodeConstraintWholeNumber(pBitStrm, <p>, <nMin>, <nMax>);"
IntFullyConstraint_decode(p, nMin, nMax, nBits, sErrCode) ::= <<
ret = BitStream_DecodeConstraintWholeNumber(pBitStrm, <p>, <nMin>, <nMax>);
*pErrCode = ret ? 0 : <sErrCode>;
>>

/*case: Positive fully constraint A:: = INTEGER (5..20) */
IntFullyConstraintPos_encode(p, nMin, nMax, nBits, sErrCode) ::= "BitStream_EncodeConstraintPosWholeNumber(pBitStrm, <p>, <nMin>, <nMax>);"
IntFullyConstraintPos_decode(p, nMin, nMax, nBits, sErrCode) ::= <<
ret = BitStream_DecodeConstraintPosWholeNumber(pBitStrm, <p>, <nMin>, <nMax>);
*pErrCode = ret ? 0 : <sErrCode>;
>>


/*case: A :: = INTEGER */
IntUnconstraint_encode(p, sErrCode, bCoverageIgnore) ::= "BitStream_EncodeUnConstraintWholeNumber(pBitStrm, <p>);"
IntUnconstraint_decode(p, sErrCode, bCoverageIgnore) ::= <<
ret = BitStream_DecodeUnConstraintWholeNumber(pBitStrm, <p>);   <if(bCoverageIgnore)>/*COVERAGE_IGNORE*/<endif>
*pErrCode = ret ? 0 : <sErrCode>;                               <if(bCoverageIgnore)>/*COVERAGE_IGNORE*/<endif>
>>

/*case: A :: = INTEGER(MIN..5) */
IntUnconstraintMax_encode(p, nMax, soCheckExp, sErrCode) ::= "BitStream_EncodeUnConstraintWholeNumber(pBitStrm, <p>);"
IntUnconstraintMax_decode(p, nMax, soCheckExp, sErrCode) ::= <<
ret = BitStream_DecodeUnConstraintWholeNumber(pBitStrm, <p>);
*pErrCode = (ret <if(soCheckExp)>&&(<soCheckExp>)<endif>) ? 0 : <sErrCode>;
>>



/*case: A:: = INTEGER (-5..MAX) */
IntSemiConstraint_encode(p, nMin, sErrCode) ::= "BitStream_EncodeSemiConstraintWholeNumber(pBitStrm, <p>, <nMin>);"
IntSemiConstraint_decode(p, nMin, sErrCode) ::= <<
ret = BitStream_DecodeSemiConstraintWholeNumber(pBitStrm, <p>, <nMin>);
*pErrCode = ret ? 0 : <sErrCode>;
>>


/*case: A:: = INTEGER (5..MAX) */
IntSemiConstraintPos_encode(p, nMin, sErrCode) ::= "BitStream_EncodeSemiConstraintPosWholeNumber(pBitStrm, <p>, <nMin>);"
IntSemiConstraintPos_decode(p, nMin, sErrCode) ::= <<
ret = BitStream_DecodeSemiConstraintPosWholeNumber(pBitStrm, <p>, <nMin>);
*pErrCode = ret ? 0 : <sErrCode>;
>>


/*case: A:: = INTEGER (5..5) */
IntNoneRequired_encode(p, nConst, sErrCode) ::= "/* No need to encode value since it will always be <nConst> */"
IntNoneRequired_decode(p, nConst, sErrCode) ::= "<p>=<nConst>; ret = TRUE; *pErrCode = 0;"


/*case: A:: = INTEGER (5..40,...) */
IntRootExt_encode(p, nMin, sRootBaseConstraint, sIntBody, sErrCode) ::=<<
BitStream_AppendBitZero(pBitStrm); /* write extension bit*/
<sIntBody>
>>


IntRootExt_decode(p, nMin, sRootBaseConstraint, sIntBody, sErrCode) ::=<<
{
	flag extBit=0;
	/* read extension bit*/
	ret = BitStream_ReadBit(pBitStrm, &extBit);
    *pErrCode = ret ? 0 : <sErrCode>;
    if (ret) {
	    if (extBit==0) { /* ext bit is zero ==> value is expecteted with root range*/
		    <sIntBody>
	    } else {
		    <IntUnconstraint_decode(p=p, sErrCode = sErrCode, bCoverageIgnore="true")>
	    }
    }
}
>>


/*case: A:: = INTEGER (5..40,..., 60..70) */
IntRootExt2_encode(p, nMin, sRootBaseConstraint, sIntBody, sErrCode) ::=<<
if (<sRootBaseConstraint>) {
    BitStream_AppendBitZero(pBitStrm); /* write extension bit, value within root range, so ext bit is zero */
    <sIntBody>
} else {
    /* value is not within root range, so ext bit is one and value is encoded as uncostraint */
    BitStream_AppendBitOne(pBitStrm);
    <IntUnconstraint_encode(p=p, sErrCode=sErrCode)>
};
>>

IntRootExt2_decode(p, nMin, sRootBaseConstraint, sIntBody, sErrCode) ::= "<IntRootExt_decode(p=p, nMin=nMin, sRootBaseConstraint = sRootBaseConstraint, sIntBody = sIntBody, sErrCode=sErrCode)>"


/* INTETEGER END*/



Null_encode(p) ::= <<
/* NULL type */
>>

Null_decode(p) ::= <<
/* NULL type */
>>

Boolean_encode(p, sErrCode) ::= "BitStream_AppendBit(pBitStrm,<p>);"

Boolean_decode(p, sErrCode) ::= <<
ret = BitStream_ReadBit(pBitStrm, <p>);
*pErrCode = ret ? 0 : ERR_INSUFFICIENT_DATA;
>>

Real_encode(p, sErrCode) ::= "BitStream_EncodeReal(pBitStrm, <p>);"
Real_decode(p, sErrCode) ::= <<
ret = BitStream_DecodeReal(pBitStrm, <p>);
*pErrCode = ret ? 0 : <sErrCode>;
>>



Enumerated_item_encode(p, sName, nIndex, nLastItemIndex) ::= <<
case <sName>:   
    BitStream_EncodeConstraintWholeNumber(pBitStrm, <nIndex>, 0, <nLastItemIndex>);
	break;
>>

Enumerated_item_decode(p, sName, nIndex, nLastItemIndex) ::= <<
case <nIndex>: 
    <p> = <sName>;
    break;
>>

Enumerated_encode(p, sTypeName, arrsItem, nMin, nMax, nBits, sErrCode, nLastItemIndex, sFirstItemName) ::= <<
switch(<p>) 
{
    <arrsItem; separator="\n">
    default:
	    *pErrCode = <sErrCode>; /*COVERAGE_IGNORE*/
	    ret = FALSE;            /*COVERAGE_IGNORE*/
}
>>

Enumerated_decode(p, sTypeName, arrsItem, nMin, nMax, nBits, sErrCode, nLastItemIndex, sFirstItemName) ::= <<
{
    asn1SccSint enumIndex;
    ret = BitStream_DecodeConstraintWholeNumber(pBitStrm, &enumIndex, 0, <nLastItemIndex>);
    *pErrCode = ret ? 0 : <sErrCode>;
    if (ret) {
        switch(enumIndex) 
        {
            <arrsItem; separator="\n">
            default:
	            *pErrCode = <sErrCode>;     /*COVERAGE_IGNORE*/
	            ret = FALSE;                /*COVERAGE_IGNORE*/
        }
    } else {
        <p> = <sFirstItemName>;             /*COVERAGE_IGNORE*/
    }
}
>>



ReferenceType1_encode(p, sName) ::= "ret = <sName>_Encode(<p>, pBitStrm, pErrCode, FALSE);"
ReferenceType1_decode(p, sName) ::= "ret = <sName>_Decode(<p>, pBitStrm, pErrCode);"

ReferenceType2_encode(p, sModName, sName) ::= "<ReferenceType1_encode(p=p, sName=sName)>"
ReferenceType2_decode(p, sModName, sName) ::= "<ReferenceType1_decode(p=p, sName=sName)>"

/* CHOICE START*/

choice_child_encode(p, sAcc, sChildID, nChildIndex, nLastItemIndex, sChildContent, sChildName, sChildTypeDef, sChoiceTypeName) ::= <<
case <sChildID>:
	BitStream_EncodeConstraintWholeNumber(pBitStrm, <nChildIndex>, 0, <nLastItemIndex>);
	<sChildContent>
	break;
>>
choice_child_decode(p, sAcc, sChildID, nChildIndex, nLastItemIndex, sChildContent, sChildName, sChildTypeDef, sChoiceTypeName) ::= <<
case <nChildIndex>:
	<p><sAcc>kind = <sChildID>;
	<sChildContent>
	break;
>>

choice_encode(p, sAcc, arrsChildren, nLastItemIndex, sChoiceIndexName, sErrCode, sTasName, nIndexSizeInBits) ::= <<
switch(<p><sAcc>kind) 
{
<arrsChildren: {ch|<ch>}; separator="\n">
default:
    *pErrCode = <sErrCode>;         /*COVERAGE_IGNORE*/
    ret = FALSE;                    /*COVERAGE_IGNORE*/
}
>>

choice_decode(p, sAcc, arrsChildren, nLastItemIndex, sChoiceIndexName, sErrCode, sTasName, nIndexSizeInBits) ::= <<
ret = BitStream_DecodeConstraintWholeNumber(pBitStrm, &<sChoiceIndexName>, 0, <nLastItemIndex>);
*pErrCode = ret ? 0 : <sErrCode>;
if (ret) {
    switch(<sChoiceIndexName>) 
    {
    <arrsChildren: {ch|<ch>}; separator="\n">
    default:
        *pErrCode = <sErrCode>;     /*COVERAGE_IGNORE*/
        ret = FALSE;                /*COVERAGE_IGNORE*/
    }
}
>>

/* CHOICE END*/



/* SEQUENCE START */
sequence_presence_bit_encode(p, sAcc, sChName, sErrCode) ::= "BitStream_AppendBit(pBitStrm,<p><sAcc>exist.<sChName>);"
sequence_presence_bit_decode(p, sAcc, sChName, sErrCode) ::= <<
ret = BitStream_ReadBit(pBitStrm, &presenceBit);
<p><sAcc>exist.<sChName> = presenceBit == 0 ? 0 : 1;
*pErrCode = ret ? 0 : <sErrCode>;
>>

sequence_presence_bit_fix_encode(p, sAcc, sChName, sErrCode, sVal) ::= "BitStream_AppendBit(pBitStrm, <sVal>);"

sequence_presence_bit_fix_decode(p, sAcc, sChName, sErrCode, sVal) ::= <<
<sequence_presence_bit_decode(p=p, sAcc=sAcc, sChName=sChName, sErrCode=sErrCode)>
>>


sequence_mandatory_child_encode(sChName, sChildContent) ::= <<
/*Encode <sChName> */
<sChildContent>
>>

sequence_mandatory_child_decode(sChName, sChildContent) ::= <<
/*Decode <sChName> */
<sChildContent>
>>


sequence_optional_child_encode(p, sAcc, sChName, sChildContent) ::= <<
/*Encode <sChName> */
if (<p><sAcc>exist.<sChName>) {
	<sChildContent>
}
>>

sequence_optional_child_decode(p, sAcc, sChName, sChildContent) ::= <<
/*Decode <sChName> */
if (<p><sAcc>exist.<sChName>) {
	<sChildContent>
}
>>


sequence_default_child_encode(p, sAcc, sChName, sChildContent, sInitWithDefaultValue) ::= <<
<sequence_optional_child_encode(p=p, sAcc=sAcc, sChName=sChName, sChildContent=sChildContent)>
>>


sequence_default_child_decode(p, sAcc, sChName, sChildContent, sInitWithDefaultValue) ::= <<
/*Decode <sChName> */
if (<p><sAcc>exist.<sChName>) {
	<sChildContent>
} else {
    <sInitWithDefaultValue>
}
>>




/* SEQUENCE END */

loopFixedItem (i, fixedSize,  sInternalItem)::= /*nogen*/<<	
for(<i>=0; (<i> \< (int)<fixedSize>) && ret; <i>++) 
{
	<sInternalItem>
}
>>


/* IA5String & Numeric String */

str_FixedSize_encode(p, sTasName, i, sInternalItem, nFixedSize, nIntItemMinSize, nIntItemMaxSize, nAlignSize) ::= <<
<loopFixedItem(i=i, sInternalItem=sInternalItem, fixedSize=nFixedSize)>
>>

str_FixedSize_decode(p, sTasName, i, sInternalItem, nFixedSize, nIntItemMinSize, nIntItemMaxSize, nAlignSize) ::= <<
<loopFixedItem(i=i, sInternalItem=sInternalItem, fixedSize=nFixedSize)>
<p>[<nFixedSize>] = 0x0;
>>

str_VarSize_encode(p, sTasName, i, sInternalItem, nSizeMin, nSizeMax, nSizeInBits, nIntItemMinSize, nIntItemMaxSize, nAlignSize) ::= <<
nStringLength = strlen(<p>);
/*ret = nStringLength >= <nSizeMin> && nStringLength \<= <nSizeMax>;*/
BitStream_EncodeConstraintWholeNumber(pBitStrm, nStringLength, <nSizeMin>, <nSizeMax>);
<loopFixedItem(i=i, sInternalItem=sInternalItem, fixedSize="nStringLength")>

>>

str_VarSize_decode(p, sTasName, i, sInternalItem, nSizeMin, nSizeMax, nSizeInBits, nIntItemMinSize, nIntItemMaxSize, nAlignSize) ::= <<
ret = BitStream_DecodeConstraintWholeNumber(pBitStrm, &nStringLength, <nSizeMin>, <nSizeMax>);
<loopFixedItem(i=i, sInternalItem=sInternalItem, fixedSize="nStringLength")>
<p>[nStringLength] = 0x0;
>>



/* SEQUENCE OF & OCTET STRING*/
octect_FixedSize_encode(p, sTasName, i, sInternalItem, nFixedSize, nIntItemMinSize, nIntItemMaxSize, nAlignSize) ::= <<
<loopFixedItem(i=i, sInternalItem=sInternalItem, fixedSize=nFixedSize)>
>>

octect_FixedSize_decode(p, sTasName, i, sInternalItem, nFixedSize, nIntItemMinSize, nIntItemMaxSize, nAlignSize) ::= <<
<loopFixedItem(i=i, sInternalItem=sInternalItem, fixedSize=nFixedSize)>
>>

octect_VarSize_encode(p, sAcc, sTasName, i, sInternalItem, nSizeMin, nSizeMax, nSizeInBits, nIntItemMinSize, nIntItemMaxSize, nAlignSize, sErrCode) ::= <<
BitStream_EncodeConstraintWholeNumber(pBitStrm, <p><sAcc>nCount, <nSizeMin>, <nSizeMax>);
<loopFixedItem(i=i, sInternalItem=sInternalItem, fixedSize=[p, sAcc, "nCount"])>
>>

octect_VarSize_decode(p, sAcc, sTasName, i, sInternalItem, nSizeMin, nSizeMax, nSizeInBits, nIntItemMinSize, nIntItemMaxSize, nAlignSize, sErrCode) ::= <<
ret = BitStream_DecodeConstraintWholeNumber(pBitStrm, &nCount, <nSizeMin>, <nSizeMax>);
*pErrCode = ret ? 0 : <sErrCode>;
<p><sAcc>nCount = (long)nCount;
<loopFixedItem(i=i, sInternalItem=sInternalItem, fixedSize=[p, sAcc, "nCount"])>
>>



/* BIT STRING*/
bitString_FixSize_encode(p, sAcc, nFixedSize, sErrCode) ::= "BitStream_AppendBits(pBitStrm, <p><sAcc>arr, <nFixedSize>);"
bitString_FixSize_decode(p, sAcc, nFixedSize, sErrCode) ::= <<
ret = BitStream_ReadBits(pBitStrm, <p><sAcc>arr, <nFixedSize>);
*pErrCode = ret ? 0 : <sErrCode>;
>>

bitString_VarSize_encode(p, sAcc, nSizeMin, nSizeMax, sErrCode) ::= <<
BitStream_EncodeConstraintWholeNumber(pBitStrm, <p><sAcc>nCount, <nSizeMin>, <nSizeMax>);
<bitString_FixSize_encode(p=p, sAcc=sAcc, nFixedSize=[p, sAcc,"nCount"], sErrCode=sErrCode)>
>>

bitString_VarSize_decode(p, sAcc, nSizeMin, nSizeMax, sErrCode) ::= <<
ret = BitStream_DecodeConstraintWholeNumber(pBitStrm, &nCount, <nSizeMin>, <nSizeMax>);
<p><sAcc>nCount = (long)nCount;
<bitString_FixSize_decode(p=p, sAcc=sAcc, nFixedSize=[p,sAcc, "nCount"], sErrCode=sErrCode)>
>>






Fragmentation_sqf_encode(p, bIsBitStringType, nLevel, sInternalItem, sCount, nUperMax, bIsAsciiString, bIsFixedSize) ::= <<
{
	asn1SccSint nCount<nLevel> = <sCount>;
	asn1SccSint curBlockSize<nLevel> = 0;
	asn1SccSint curItem<nLevel> = 0;
	while (nCount<nLevel> >= 0x4000) 
	{
		if (nCount<nLevel> >= 0x10000)
		{
			curBlockSize<nLevel> = 0x10000;
			BitStream_EncodeConstraintWholeNumber(pBitStrm, 0xC4, 0, 0xFF); 
		}
		else if (nCount<nLevel> >= 0xC000)
		{
			curBlockSize<nLevel> = 0xC000;
			BitStream_EncodeConstraintWholeNumber(pBitStrm, 0xC3, 0, 0xFF); 
		}
		else if (nCount<nLevel> >= 0x8000)
		{
			curBlockSize<nLevel> = 0x8000;
			BitStream_EncodeConstraintWholeNumber(pBitStrm, 0xC2, 0, 0xFF); 
		}
		else 
		{
			curBlockSize<nLevel> = 0x4000;
			BitStream_EncodeConstraintWholeNumber(pBitStrm, 0xC1, 0, 0xFF); 
		}
	
		<if(bIsBitStringType)>
		BitStream_AppendBits(pBitStrm, &<p>arr[curItem<nLevel>/8], (int)curBlockSize<nLevel>);
		<else>
		for(i<nLevel>=(int)curItem<nLevel>; i<nLevel> \< curBlockSize<nLevel> + curItem<nLevel>; i<nLevel>++)
		{
			<sInternalItem>
		}
		<endif>
		curItem<nLevel> += curBlockSize<nLevel>;
		nCount<nLevel> -= curBlockSize<nLevel>;
	}

	if (nCount<nLevel> \<= 0x7F)
		BitStream_EncodeConstraintWholeNumber(pBitStrm, nCount<nLevel>, 0, 0xFF);
	else
	{
		BitStream_AppendBit(pBitStrm, 1);
		BitStream_EncodeConstraintWholeNumber(pBitStrm, nCount<nLevel>, 0, 0x7FFF);
	}

	<if(bIsBitStringType)>
	BitStream_AppendBits(pBitStrm, &<p>arr[curItem<nLevel>/8], (int)nCount<nLevel>);
	<else>
	for(i<nLevel>=(int)curItem<nLevel>; i<nLevel> \< curItem<nLevel> + nCount<nLevel>; i<nLevel>++)
	{
		<sInternalItem>
	}
	<endif>
}
>>

Fragmentation_sqf_decode(p, bIsBitStringType, nLevel, sInternalItem, sCount, nUperMax, bIsAsciiString, bIsFixedSize) ::= <<
{
	asn1SccSint nCount<nLevel> = 0;
	asn1SccSint curBlockSize<nLevel> = 0;
	asn1SccSint curItem<nLevel> = 0;
    <if(!bIsFixedSize)><sCount> = 0;<endif>
	ret = BitStream_DecodeConstraintWholeNumber(pBitStrm, &nCount<nLevel>, 0, 0xFF);
    *pErrCode = ret ? 0 : ERR_INSUFFICIENT_DATA;
    if (ret) {
	    while(ret && (nCount<nLevel> & 0xC0)==0xC0) 
	    {
		    if (nCount<nLevel> == 0xC4)
			    curBlockSize<nLevel> = 0x10000;
		    else if (nCount<nLevel> == 0xC3)
			    curBlockSize<nLevel> = 0xC000;
		    else if (nCount<nLevel> == 0xC2)
			    curBlockSize<nLevel> = 0x8000;
		    else if (nCount<nLevel> == 0xC1)
			    curBlockSize<nLevel> = 0x4000;
		    else {
			    *pErrCode = ERR_INCORRECT_PER_STREAM;
			    return FALSE;
		    }
		    if (curItem<nLevel> + curBlockSize<nLevel> > <nUperMax>)
		    {
			    *pErrCode = ERR_INSUFFICIENT_DATA;
			    return FALSE;
		    }

		    <if(bIsBitStringType)>
		    ret = BitStream_ReadBits(pBitStrm, &<p>arr[curItem<nLevel>/8], (int)curBlockSize<nLevel>);
            *pErrCode = ret ? 0 : ERR_INSUFFICIENT_DATA;
		    <else>
		    for(i<nLevel>=curItem<nLevel>; ret && (i<nLevel> \< curItem<nLevel> + curBlockSize<nLevel>) ; i<nLevel>++)
		    {
			    <sInternalItem>
		    }
		    <endif>
	
            if (ret) {
		        <if(!bIsAsciiString)>
		        <if(!bIsFixedSize)><sCount> += (long)curBlockSize<nLevel>;<endif>
		        <endif>
		        curItem<nLevel> += curBlockSize<nLevel>;
		        ret = BitStream_DecodeConstraintWholeNumber(pBitStrm, &nCount<nLevel>, 0, 0xFF);
                *pErrCode = ret ? 0 : ERR_INSUFFICIENT_DATA;
            }
	    }
        if (ret) {
	        if ( (nCount<nLevel> & 0x80)>0) 
	        {
		        asn1SccSint len2;
		        nCount<nLevel> \<\<= 8;
		        ret = BitStream_DecodeConstraintWholeNumber(pBitStrm, &len2, 0, 0xFF);
                *pErrCode = ret ? 0 : ERR_INSUFFICIENT_DATA;
                if (ret) {
		            nCount<nLevel> |= len2;
		            nCount<nLevel> &= 0x7FFF;
                }
	        }
            ret = ret && (curItem<nLevel> + nCount<nLevel> \<= <nUperMax>);
            *pErrCode = ret ? 0 : ERR_INSUFFICIENT_DATA;
            if (ret) {
	            <if(bIsBitStringType)>
                ret = BitStream_ReadBits(pBitStrm, &<p>arr[curItem<nLevel>/8], (int)nCount<nLevel>);
                *pErrCode = ret ? 0 : ERR_INSUFFICIENT_DATA;
	            <else>
	            for(i<nLevel>=curItem<nLevel>; ret && (i<nLevel> \< curItem<nLevel> + nCount<nLevel>) ; i<nLevel>++)
	            {
		            <sInternalItem>
	            }
	            <endif>
                if (ret) {
	                <if(!bIsAsciiString)>
	                <if(!bIsFixedSize)><sCount> += (long)nCount<nLevel>;<endif>
	                <endif>
                }
            }
        }
    }
}
>>


PrintDefaultAcnModule(sModName, arrsTypeAssignments, sAssignOperator) ::= <<
<sModName> DEFINITIONS <sAssignOperator> BEGIN
    <arrsTypeAssignments; separator="\n">
END
>>
